OSI七层模型：
	-1）物理层：比特流传输。将数据转换为可通过物理介质传送的电子信号，相当于邮局的搬运工人
	-2）数据链路层：提供介质访问、链路管理等。决定访问网络介质的方式。在此层将数据分帧，并处理流控制。本层指定拓扑结构并提供硬件寻址，相当于邮局的装拆箱工人
	-3）网络层：寻址和路由选择。使用权数据路由经过大型网络，相当于邮局的排序工人
	-4）传输层：建立主机端到端连接。提供终端到终端的可靠连接，相当于公司的跑邮局的送信职员
	-5）会话层：建立、维护和管理会话。允许用户使用简单的名称建立连接，相当于公司中收寄信、写信封与拆信封的秘书
	-6）表示层：处理数据格式、数据加密等。协商数据交换格式，相当于公司中简报老板、替老板写信的助理
	-7）应用层：提供应用程序间通信。用户的应用程序和网络之间的接口老板

问：http状态码含义？
	状态码有三位数字组成，第一位数字定义了响应的类别，共分5类：
	1XX：指示信息--表示请求已接收，继续处理
	2XX：成功--表示请求已被成功接收、理解、接受
	3XX：重定向--要完成请求必须进行更进一步的操作
	4XX：客户端错误--请求有语法错误或请求无法实现
	5XX：服务端错误--服务器未能实现合法的请求


问：从输入网址到获得页面的过程？浏览器输入URL发生什么？
	1.查询DNS，获取域名对应IP地址；
		-1）浏览器搜索自身的DNS缓存
		-2）搜索操作系统的DNS缓存
		-3）读取本地的HOST文件
		-4）发起一个DNS的系统调用
			1、宽带运营服务器查看本身缓存
			2、运营服务器发起一个迭代DNS解析请求
	2.浏览器获得域名对应的ip地址后，发起http三次握手；
	3.tcp/ip连接建立起来后，浏览器就可以向服务器发送http请求；
	4.服务器接收这个请求，根据路径参数，经过后端的一些处理生成html页面代码返回给浏览器；
	5.浏览器拿到完整html页面代码开始解析和渲染，如果遇到引用的外部js、css、图片等资源，它们同样也是一个个http请求，都需经过上面步骤
	6.浏览器根据拿到的资源对页面进行渲染，最终把一个完整的页面呈现给用户。

问：发送http请求过程？
	--参见《http请求过程》
	主要是两个过程：建立连接和数据传输。建立连接需要经过tcp的三次握手；数据传输需要统一按照http协议规定的格式。



*******************tcp************************
问：三次握手、四次挥手流程？
三次握手流程：
	概念：建立tcp连接需要三次握手，指建立一个TCP连接时，需要客户端和服务器总共发送3个包。
	1.建立连接时，客户端发送SYN包到服务器，并进入SYN_SEND状态，等待服务器响应、确认(SYN=1 Seq=X)
	2.服务器收到SYN包，应答客户端的SYN(ACK=X+1)，同时自己也发送一个SYN包，即SYN+ACK包此时服务器进入SYN_RECV状态(SYN=1 ACK=X+1 Seq=Y)
	3.客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=Y+1)，此包发送完毕客户端和服务器端进入ESTABLISHED状态，完成三次握手(ACK=Y+1 Seq=Z)
	目的：前两次握手为了保证服务端能收到客户端的信息并能做出正确的响应，后两次握手为了保证客户端能够收到服务端的信息并能做出正确的响应
	相关问题：为什么TCP建立连接需要三次握手，明明两次就可以建立起连接？
四次挥手流程：
	1.客户端发送FIN
	2.服务器回应ACK
	3.服务器发送FIN
	4.客户端回应ACK




问：tcp和udp区别？tcp和udp的优缺点？
	tcp(Transmission Control Protocol):传输控制协议
		出现原因：应用层需要可靠的连接，但网络层ip没有这样的流机制，因而需要传输层的tcp协议
		特点：传输层协议，面向连接、可靠，基于字节流。
		面向连接：即客户端和服务器之间发送数据必须要先建立连接。
		可靠：通过tcp传输的数据，无差错，不丢失，不重复，且按序到达
		tcp连接建立：使用三次握手建立连接。
		tcp终止连接：使用四次挥手种植连接
	udp(User Datagram Protocol):用户数据报协议
		特点：传输层协议，无连接，提供面向事务的简单的不可靠的传输。
		udp无连接，通讯质量要求不高，网路速度要求高。用于语音、视频、流，多对多
	区别：
		每一条tcp连接只能是点到点的（一对一），udp支持一对一、一对多和多对多的监护通信。

问：服务端怎么检测tcp连接已超时？什么时候可以销毁释放？
	标准tcp协议里把对方设为2小时，若服务器超过2小时还没有收到客户端消息，它就发送探测报文段，若发送了10个探测报文段（每一个相隔75s）还没有收到响应，就假定该客户端出了故障，并终止这个连接。

问：tcp数据传输过程中怎么做到可靠的？
	给每个数据包分配一个序列号，并等待接收主机对这些数据包全部确认。

问：tcp如何保证包的顺序传输？tcp怎么保证有序传输的？
	1.主机每次发送数据时，tcp就给每个数据包分配一个序列号并且在一个特定的时间内等待接收主机对分配的这个序列号进行确认。如果发送主机在一个特定时间内没有收到接收主机的确认，则发送主机会重传该数据包；
	2、接收主机利用序列号对接收的数据进行确认，以便检测对方发送的数据是否又丢失或乱序等；接收主机一旦收到已经顺序化的数据，就将这些数据按正确的顺序重组成数据流并传到高层进行处理。
	
	--具体步骤：
	1、为了保证数据包的可靠传递，发送方必须把已发送的数据包保留在缓冲区，并为每个已发送的数据包启动一个超时定时器，若在定时器超时之前收到对方发来的应答信息，则释放该数据包占用的缓冲区，否则重传该数据包，直到收到应答或重传次数超过规定的最大次数为止；
	2、接收方收到数据包后，先进行CRC校验，若正确则把数据交给上层协议，然后给发送方发送一个累计应答包，表明该数据已接收，若接收方正好也有数据要发给发送方，应答包也可在数据包中稍带过去。
	CRC(Cyclic Redundancy Check,循环冗余校验)

问：若没有给数据包做顺序化有什么问题？
	可能造成数据包的重传（原因：接收方来及时做已接收应答）、顺序的颠倒甚至数据包丢失。

问：讲下tcp的快速重传和拥塞机制？
问：tcp的拥塞控制机制？
	原因：防止丢包过多导致传输效率底下。
	网络中传输的包太多路由器的缓存又不够，每一个发送端都以自己想要的发送速率发送包，自然会导致网络拥塞，所以tcp就包括了拥塞控制机制。

问：知不知道time_wait状态，这个状态出现在什么地方，有什么用（参考quic）？


问：若tcp接收方突然故障，会发生什么？
	重传

问：tcp的重传机制？

问：什么是tcp/ip协议族？
	tcp/ip 模型包含了tcp、ip、udp、telnet、ftp、smtp等上百个互为关联的协议，其中tcp和ip是最常用的两种底层协议，所以把它们统称为“tcp/ip 协议族”。

问：tcp/ip协议按层次划分了哪几层？各层的作用是什么？
	按层次分为4层：应用层、传输层、网路层、数据链路层
	应用层：向用户提供应用服务时的活动。如fpt(文件传输协议)、dns(域名系统)、http
	传输层：提供处在网络链接中的两台计算机之间的数据传输。如tcp(传输控制协议)、udp(用户数据协议)
	网络层：用来处理网络上流通的数据包，数据包是网络传输的最小单位，该层规定了通过怎样的路径到达对方计算机，并把数据包传送给对方
	数据链路层：用来处理连接网路的硬件部分。

问：请画出并说明http请求时，tcp/ip通信传输流？
	ip协议位于网络层，tcp协议位于传输层

问：什么是字节流服务？


问：tcp沾包问题？
	tcp沾包指发送方发送若干包数据到达接收方时沾成一包。
	socket网络编程中，都是端到端通信，由客户端端口+服务端端口+客户端ip+服务端ip+传输协议组成五元组。发送端为了将多个发往接收端的包，更加高效的的发给接收端，于是采用了优化算法（Nagle算法），将多次间隔较小、数据量较小的数据，合并成一个数据量大的数据块，然后进行封包。



*******************http协议************************
http协议：
	--简介：
	http协议应用层协议，基于tcp/ip协议，是浏览器与服务器之间的数据传输协议。
	http协议仅规定了数据传输格式，与数据如何传输无关(数据传输由tcp完成)。
	http协议是一种数据包的格式，不涉及数据包的传输，数据包具体由tcp传输
	--特点：
	-1）无状态
		http协议的无状态是针对每一次请求和响应的。
		对同一url请求没有记忆能力，当客户端再发送一次http请求时，http无法知道当前客户是“老用户”。
	-2）长连接
		http长连接是指建立一次tcp连接后长时间不关闭，供后面的请求使用，本质上是tcp的长连接。
		http1.0默认短连接，http1.1默认长连接，短连接现在用的很少了。
		实现：http长连接本质上是基于tcp连接的不关闭实现。而对于两次http请求来说依然没有直接关系的，所以说http是无状态的。
		注：一个包含了许多图像的网页文件的多个请求和应答可以在一个连接中传输，但每个单独的网页文件的请求和应答仍然需要使用各自的连接。
		目的：长连接省去了较多的tcp建立、关闭操作，使得每次发送请求不用重新建立tcp连接，减少开销。而保持连接的时间长短由服务端决定，比如tomcat中的server.xml文件就有相关配置。
		保持连接有开销的，因此服务端会给连接设置超时时间，一段时间内连接上没请求数据就会关闭连接；以及设置最大连接数限制。

问：http的无状态和长连接矛盾吗？
	无状态指对于每次http请求都是独立的，服务端没有保存客户端的状态。
	长连接指tcp在单次请求完成后不关闭连接，下次再请求时可复用之前的连接。本质是tcp的长连接。
	http无状态和长连接是不同层面上的东西，所以这两者之间不矛盾。

问：http是无状态的，怎么确保请求是某个客户的？
	http协议是应用层协议重点说明接收到的数据要如何解析，本身并不关心之前的请求是什么样，只要根据协议理解本次请求发过来的东西是什么就好。
	后来因为程序的功能可能需要多个http请求才能完成互相依赖的操作，就有了cookie和session。

问：http连接超时情况？
	1、服务端检测某个tcp连接超过一段时间没有发起请求，服务端会关闭这个连接。(在服务端设置超时值)
	2、浏览器发起一个请求后，在等待服务端超过一段时间没有得到响应。(在浏览器设置超时值)

问：如果一个连接里面处理一个长事物，其他的请求会不会排队等待？
	在http1.1中，请求是按顺序排队处理的，前面的http请求处理会阻塞后面的http请求，虽然http pipelining 对连接请求做了改善，但是复杂度太大，并没有普及，这个问题在 http2.0 中得到了解决。

问：tcp协议和http协议区别？
	http是应用层协议，规定了数据格式；tcp是传输层协议，用于数据传输。
	应用层的http协议是无状态的，但可以使用cookie和session来保存请求之间的关系。
	一般把“面向连接”来描述传输层的tcp协议，tcp是有状态的，tcp连接过程中有三次握手，因为通信两端需要维护一个tcp的状态机。


问：http和https区别？
	http端口为80，https端口为443。
	http运行在tcp之上。所有传输的内容都是明文。
	https运行在ssl/tls之上，而ssl/tls运行在tcp之上。所有传输的内容都经过加密。
	在osi网络模型中，http工作在应用层，https的安全传输机制工作在传输层。
	https加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。
	https协议需要到ca申请证书，一般免费证书很少，需要交费。

Https的SSL握手过程
	https://blog.csdn.net/shengqianfeng/article/details/102572691	--未整理


问：http1.0与http1.1区别？
	http1.0默认短链接，设置为长连接需在响应头配置“Connection: keep-alive”。
	http1.1默认长连接，在一个tcp连接上可以传送多个http请求h和响应，减少了建立和关闭连接的消耗和延迟。
	http1.1采用流水线的持久连接，即客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序一次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著减少了整个下载过程所需要的时间。

问：http发展到1.1仍存在哪些问题？
	1、线头阻塞：tcp连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。
	2、多个tcp连接：虽然http1.1管道化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化，所以1.1版本请求并发依赖于多个tcp连接。
	3、头部冗余，采用文本格式

问：http2.0特点？
	1、引入了多路复用技术，该技术可以只通过一个tcp连接就可以传输所有的请求数据。
	2、引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。(以前httpb版本中通过文本的方式传输数据)
	3、在http/2中有两个重要的概念：帧frame和流stream
		帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。

问：Http Pipelining 管线化？
	即将多个http请求整批提交。
	使用Http Pipelining技术之后，某个连接上的消息变成了类似这样的请求1->请求2->请求3->响应1->响应2->响应3。
	虽然http1.1管道化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化，所以1.1版本请求并发依赖于多个tcp连接。




*******************https协议************************
https相关问题：
	详情：https://zhuanlan.zhihu.com/p/101544881

为什么用了https就是安全的？
	http通讯时，若客户端c请求服务器s，那么可以通过网络抓包的形式来获取信息，甚至可以模拟服务器s端，来骗取与c端的通讯信息
	http协议被认为不安全是因为传输过程容易被监听者勾线监听、伪造服务器，而https协议主要解决的便是网络传输的安全性问题。

https实现原理？
	分两步骤：证书验证和数据传输阶段(https实现原理图.jpg)，证书验证是采用非对称加密实现，但是传输过程是采用对称加密
	--证书验证阶段：
	-1）浏览器发起https请求，发送握手消息；
	-2）服务端返回https证书、对称加密算法和公钥给客户端；
	-3）客户端验证证书是否合法，若不合法则提示非安全证书。
	--数据传输阶段：
	-1）当证书验证合法后，在本地生成随机数，并将随机数用证书里加密算法的公钥进行加密后发送给服务端；
	-2）服务端通过私钥进行解密后得到随机数，并用此随机数作为密钥采用对称加密算法加密一段握手消息发给客户端；
	-3）客户端收到消息后解密成功，则握手结束，后续的信息都通过此随机数加密后传输。
	随机数作用：用于数据传输的对称加密算法的加密

说下https的握手过程？
	详情：https://www.iteye.com/blog/luqingxuan-2329521

为什么数据传输是用对称加密？
	1、非对称加密的加密解密效率非常低，而服务端与客户端之间存在大量的交互，非对称加密的效率无法接受；
	2、在https的场景只有服务端保存了私钥，一对公私钥只能实现单向的加解密，所以https中内容传输加密采取的是对称加密，而不是非对称加密。

为什么需要ca认证机构颁发证书？
	假设不存在认证机构，任何人都可以制作证书，这带来的安全风险就是经典的“中间人攻击”问题。(中间人攻击图.jpg)

中间人攻击过程：
	-1）本地请求被劫持（如DNS劫持等），所有请求均被发送到中间人的服务器；
	-2）中间人服务器返回中间人自己的证书；
	-3）客户端创建随机数，通过中间人证书的公钥对随机数加密后传送给中间人，然后凭随机数构造对称加密对传输内容进行加密传输；
	-4）中间人因为拥有客户端的随机数，可以用过对称加密算法进行内容解密；
	-5）中间人以客户端请求内容再向正规网站发起请求
	-6）因为中间人与服务器的通信过程是合法的，正规网站通过建立的安全通道返回加密后的数据。
	-7）中间人凭借与正规网站建立的对称加密算法对内容进行解密。
	-8）中间人通过与客户端建立的对称加密算法对正规内容返回的数据进行加密传输。
	-9）客户端通过与中间人建立的对称加密算法对返回结果数据进行解密。


浏览器如何确保ca证书的合法性？
证书包含什么信息？
	颁发机构信息、公钥、公司信息、域名、有效期、指纹
证书的合法性依据是什么？
	1、权威机构是要有认证的，不是随便一个机构都有资格颁发证书，不然也不叫权威机构；
	2、证书的可信性基于信任制，权威机构需要对其颁发的证书进行信用背书，只要是权威机构生成的证书，我们就认为是合法的；
	3、权威机构会对申请者的信息进行审核，不同等级的权威机构对审核的要求也不一样，于是证书也分为免费的、便宜的和贵的。
浏览器如何验证证书的合法性？
	浏览器发起https请求时，服务器会返回网站的ssl证书。
	浏览器需要对证书做以下校验：
		域名、有效期等信息是否正确；
		证书来源是否合法；
		证书是否被篡改。需要与ca服务器进行校验
		证书是否已吊销。
如何避免这种证书的冒用？
	描述：证书是公开的，若要发起中间人攻击，我在官网上下载一份证书作为我的服务器证书，那客户端肯定会认同这个证书是合法的。
	其实这就是非加密对称中公私钥的用处，虽然中间人可以得到证书，但私钥是无法获取的。一份公钥是不可能推算出其对应的私钥，中间人即使拿到证书也无法伪装成合法服务端，因为无法对客户端传入的加密数据进行解密。

本地随机数被窃取怎么办？
	证书验证是采用非对称加密实现，但是传输过程是采用对称加密，而其中对称加密算法中重要的随机数是由本地生成并且存储于本地的，HTTPS 如何保证随机数不会被窃取？
	其实 HTTPS 并不包含对随机数的安全保证，HTTPS 保证的只是传输过程安全，而随机数存储于本地，本地的安全属于另一安全范畴，应对的措施有安装杀毒软件、反木马、浏览器升级修复漏洞等。





问：什么ARQ协议？

问：什么是滑动窗口？

问：拥塞怎么处理？

问：什么是DNS服务？

问：什么RFC？

问：http请求报文由哪几部分组成？


问：get和post区别？
	post没有数据量限制。

问：如何知道l连接是恶意的还是正常的？

问：DDos攻击？含义、预防	
五种网络IO模型，及select、poll、epoll的区别？
