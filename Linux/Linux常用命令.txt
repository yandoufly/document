

Linux相关问题：
怎么查看进程和杀死进程？
打印一个文件夹的所有文件
线程和进程区别
线程的通信方式，进程的通信方式
系统线程的数量上限是多少？
页式存储的概念
内存碎片是什么，怎么解决这个问题
Linux cpu 满了怎么排查？
怎么查看占 cpu 最多的线程？
Linux怎么搜索文件中的字符串，写到另一个文件中
liunx 网络相关命令
Linux如何查看IO读写很高
Linux中异步IO是如何实现的，消息队列如何实现的？
并发量很大，服务器宕机。你会怎么做？
如果线上用户出现502错误你怎么排查？
dns迭代和递归的区别



Linux目录结构如下：
	/etc：所有的系统管理所需要的配置文件和子目录。
	/home：存放普通用户的主目录， 在Linux中每个用户都有一个自己的目录， 一般该目录名是以用户的账号命名的。
	/lib：系统开机所需要最基本的动态连接共享库， 其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库
	/lost+found：这个目录一般情况下是空的， 当系统非法关机后， 这里就存放了一些文件。
	/media：linux系统会自动识别一些设备， 例如U盘、光驱等等， 当识别后， linux会把识别的设备挂载到这个目录下
	/mnt：系统提供该目录是为了让用户临时挂载别的文件系统的， 我们可以将光驱挂载在/mnt/上， 然后
	/opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。
	/proc：这个目录是一个虚拟的目录， 它是系统内存的映射， 我们可以通过直接访问这个目录来获取系统信息。
	/root：该目录为系统管理员， 也称作超级权限者的用户主目录。
	/sbin：s就是SuperUser的意思，这里存放的是系统管理员使用的系统管理程序。
	/selinux：这个目录是Redhat/CentOS所特有的目录， Selinux是一个安全机制， 类似于windows的防火墙
	/srv：service缩写，该目录存放一些服务启动之后需要提取的数据。
	/sys：这是linux 2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个为文件系统sysfs。
	/tmp：这个目录是用来存放一些临时文件的。
	/usr：这是一个非常重要的目录， 用户的很多应用程序和文件都放在这个目录下， 类似与windows下的program files目录。
	/var：这个目录中存放着在不断扩充着的东西， 我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。

CentOS 中每个用户都要指定各自的环境变量，这样会比较麻烦，那么如何配置一个环境变量，所有的用户都可以使用呢？
	答：将环境变量放在“/etc/profile.d”中


Linux连接工具：
	SecureCRT
	Xshell
	WinSCP


vim编辑文件：
	vim fileName #进入vi命令
	:set nu #显示所有行号
	i 	#进入编辑模式
	esc	#退出编辑模式
	:q 	#不保存退出vim
	:q!	#强制不保存退出vim
	:wq	#保存退出vim
	/text #查找所匹配的内容text


查看Linux版本: > cat /etc/centos-release
查看CPU个数：
	查看逻辑cpu个数： cat /pro/cpuinfo | grep "processor" | wc -l
	查看物理cpu个数： cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l
	查看每个物理cpu的核数： cat /proc/cpuinfo | grep "cpu cores"
	若所有物理cpu的cores个数加起来小于逻辑cpu个数，则该cpu使用了超线程技术。
	查看每个物理cpu中逻辑cpu的个数：cat /proc/cpuinfo | grep "siblings"
查看内存使用情况：> free -m
	Mem：内存的使用情况总览表
	total：机器总物理内存，单位为M
	used：用掉的内存
	free：空闲的内存


Centos7修改IP地址：
	前言：动态生成的ip地址不利于我们配置各种软件环境，因此修改为静态ip地址
> cd  /etc/sysconfig/network-scripts/ #root用户进入网络配置文件network-script目录
> ls # 找到“ifcfg-ens33”文件
> vi ifcfg-ens33 #对配置进行修改
	--1.将BOOTPROTO和ONBOOT属性
	BOOTPROTO="static" #将dhcp改为static
	ONBOOT="yes"  #将网卡设置为开机启用
	--2.在底部添加内容
	IPADDR=192.168.8.129  #静态IP
	NETMASK=255.255.255.0 #子网掩码
	GATEWAY=192.168.8.2   #默认网关（GATEWAY网关地址需要和虚拟机的网关地址一样）
	DNS1=8.8.8.8 #设置主DNS（DNS解决设置静态ip后连接不上外网的问题）
	DNS2=8.8.4.4 #设置备DNS
> service network restart #重启网络服务
相关问题：
	设置静态ip地址后用xshell连接不上？
		GATEWAY网关地址需要和虚拟机的网关地址一样。
		查看虚拟机网关：虚拟机首页->最上方菜单的“编辑”->虚拟网络编辑器->NAT设置->网关IP
	设置静态ip地址后连接不上外网？
		设置DNS即可



*************************************************
jvm监控工具：
jps：jvm进程状况工具
	格式：jps [options] [hostid]
	options说明:
		-q不输出类名、jar名和传入main方法的参数
		-l输出main类或jar的全限名
		-m输出传入方法的参数
		-v输出传入jvm的参数


jstack：Java堆栈跟踪工具
	jstack可以跟踪线程的调用堆栈，以便追踪错误原因。
	用于生成Java虚拟机当前时刻的线程快照。线程快照是当前Java虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程死锁、死循环、请求外部资源导致的长时间等等。


jstat：jvm统计信息监控工具
	英文为“Java Virtual Machine statistics monitoring tool”，翻译为：Java虚拟机统计信息监视工具。
	jstat可以检查jvm的内存使用情况，gc情况以及线程状态等；
	jstat用于监视虚拟机各种运行状态信息的命令工具。它可以显示本地或远程虚拟机进行中的类装载、内存、垃圾收集、jit编译等运行数据，它是线上定位jvm性能的首选工具。
格式：
	> jstat -help
	> jstat -help|-options
	> jstat -<option> [-t] [-h<lines>] <vmid> [<interval>] [<count>]
	--说明：
	option:参数选项，如class,compiler,gc,gccapacity等
	-t:可以打印的列加上Timestamp列，用于显示系统运行时间
	-h:可以在周期性数据
	vmid:Virtual Machine ID（ 进程的 pid）
示例：
	jstat -class pid #显示加载class的数量，及所占空间等信息
	jstat -compiler pid #显示vm实时编译的数量等信息
	jstat -gc pid #显示gc信息，查看gc的次数及时间。其中最后五项分别为young gc的次数，young gc的时间，full gc的次数，full gc的时间，gc的总时间。
	更多详情：https://github.com/h2pl/Java-Tutorial/blob/master/docs/java/jvm/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA9%EF%BC%9AJVM%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E4%B8%8E%E8%AF%8A%E6%96%AD%E5%AE%9E%E8%B7%B5.md


jinfo：java配置信息
	格式：jinfo [option] pid

jmap：Java内存映射工具
	jmap用于把堆栈快照转储到文件系统，然后可以用其他工具去排查。
	用于生产堆转存快照。打印出某个Java进行（使用pid）内存内的，所有对象的情况。（如产生那些对象，及其数量）
	格式：
		jmap [option] pid
		jmap [option] executable core

jmap命令(Java Memory Map)：
	jmap用于生成heap dump文件。
	如果不使用这个命令，还可以利用-XX:+HeapDumpOutOfMemoryError参数来让虚拟机出现OOM错误时自动生成dump文件。
	jmap不仅能生成dump文件，还可以查询finalize执行队列、Java堆和永久代的详细信息，如当前使用率、当前使用的是哪种收集器等。
	堆快照（heap dump）：
		堆快照是一个用来检查Java内存中的对象和数据的内存文件。该文件可以通过执行JDK中的jmap命令来创建。在创建文件的过程中，所有Java程序都将暂停，因此，不要在系统执行过程中创建该文件。？？？
jmap的几个主要的危险操作如下：
1. jmap -dump
	这个命令执行，JVM会将整个heap的信息dump写入到一个文件，heap如果比较大的话，就会导致这个过程比较耗时，并且执行的过程中为了保证dump的信息是可靠的，所以会暂停应用。
2. jmap -permstat
	这个命令执行，JVM会去统计perm区的状况，这整个过程也会比较的耗时，并且同样也会暂停应用。
3. jmap -histo:live
	这个命令执行，JVM会先触发gc，然后再统计信息。



visualvm是一款很不错的gui调试工具，可以远程登录主机以便访问其jvm的状态并进行监控。


****************************实战****************************
cpu飙升:找出最耗cpu的线程并定位代码 || 查看占用CPU最高的进程
	描述：在线上有时候某个时刻，可能会出现应用某个时刻突然cpu飙升的问题。对此我们应该熟悉一些指令，快速排查对应代码。
	> top #1.找到最耗cpu的进程PID
	> top -H -p  pid #2.通过pid得到该进程最耗cpu的线程
	> printf "%x\n" 2012 #3.得到线程id为2012其对应的十六进制7dc
	4.过滤指定线程，打印堆栈信息
		--打印进程堆栈，并通过线程id，过滤得到线程堆栈信息
		语法：jstack pid | grep threadPid
		例如：jstack 15325 | grep 7dc -C5 --color


查看耗cpu的线程：
	top -查看最耗费cpu的进程
	top -H -p pid #查看具体的线程信息
	jstack pid | grep -A 10 [线程的16进制]

线程死锁
	描述：比如说我们现在已经有一个线程死锁的程序，导致某些操作waiting中
	1.查找Java进程：top
	2.查看Java进程的线程快照信息：
		--从输出信息可以看到，有一个线程死锁发生，并且指出了那行代码出现的。如此可以快速排查问题
		jstack -l pid

Java死锁排查：
	详情：https://www.cnblogs.com/aflyun/p/9194104.html
	1.运行死锁程序
	2.命令窗口使用ps+jstack
	> ps -ef | grep java #获取pid，即Java进程ID
	> jstack -l pid #查看线程，能发现死锁
	> JConsole #打开图形化监控工具
	> jvisualvm #打开图形化监控工具

线上发送频繁full gc如何处理? CPU 使用率过高怎么办?

Thread dump文件如何分析？
	dump文件用途、生成、分析



********************
top命令：
第一行：基本信息
	系统时间：“19:26:23 up”
	系统运行时间：“2 days, 14:46”，这里表示已经运行了2天14小时46分钟
		
	当前登录用户数：“1 user”
	负载均衡(load average):0.04 0.04 0.01
		average后面三个数分别是1分钟、5分钟、15分钟的负载情况
		load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了
第二行：任务信息
	总进程:159 total, 运行:1 running, 休眠:157 sleeping, 停止: 1 stopped, 僵尸进程: 0 zombie
第三行：CPU使用情况
	0.0%us【user space】— 用户空间占用CPU的百分比。
	0.1%sy【sysctl】— 内核空间占用CPU的百分比。
	0.0%ni【】— 改变过优先级的进程占用CPU的百分比
	99.9%id【idolt】— 空闲CPU百分比
	0.0%wa【wait】— IO等待占用CPU的百分比
	0.0%hi【Hardware IRQ】— 硬中断占用CPU的百分比
	0.0%si【Software Interrupts】— 软中断占用CPU的百分比
第四行：物理内存使用情况
	1012288k total,   234464k used,   777824k free,    24084k buffers【缓存的内存量】
第五行：swap交换分区信息
	614396k total,        0k used,   614396k free,    72356k cached【缓冲的交换区总量】
	说明：
		可用内存=free+buffer+cached
		对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了。
		第四行中使用中的内存总量（used）指的是现在系统内核控制的内存数，
		第四行中空闲内存总量（free）是内核还未纳入其管控范围的数量。
		纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存交还到free中去，因此在linux上free内存会越来越少，但不用为此担心。
第六行：空行
第七行以下：各进程（任务）的状态监控
	pid -进程id
	user -进程所有者
	pr -进程优先级
	ni -nice值。负值表示高优先级，正值表示低优先级
	virt -进程使用的虚拟内存总量，单位kb。virt=swap+res
	res -进程使用的、未被换出的物理内存大小，单位kb。res=code+data
	shr -共享内存大小，单位kb
	s -进程状态。d=不可中断的睡眠状态 r=运行 s=睡眠 t=跟踪/停止 z=僵尸进程
	%cpu -上次更新到现在的cpu时间占用百分比
	%mem -进程使用的物理内存百分比
	time+ -进程使用的cpu时间总计，单位1/100秒
	command -进程名称（命令名/命令行）

********************
grep命令
	--用于查找文件里付符合条件的字符串
	grep [-cinvABC] 'word' filename
	-c:打印符合要求的行数
	-n:在输出符合要求的行同时连同行号一起输出
	-v:打印不符合要求的行
	-A:后跟一个数字(有无空格都可以)，例如-A2则表示打印符合要求的行以及下面两行
	-B:后跟一个数字，例如-B2打印符合要求的行以及上面两行
	-C:后跟一个数字，例如-C2打印符合要求的行以及上下各两行
	-r:会把目录下面所有的文件全部遍历
实例：
	> grep -500 'Exception' ./springboot.log #查看日志的有Exception关键字的前后500行内容
	> grep -n 'root' 1.txt		#打印包含root的行，并输出行号
	> grep -n -v 'root' 1.txt 	#打印不包含root的行，并输出行号
	> grep '[0-9]' 1.txt	#打印包含数字的行
	> grep '^[a-zA-Z]' 1.txt	#打印以英文字母开头的行
	> grep test *.log 	#查找包含test字符串的所有日志文件
	> grep 'testAA' ./*	#查看当前目录下所有文件是否存在“testAA”内容

问：如何在log文件中搜索找出error的日志？
	grep -n 'error' *.log

实例1-Linux根据关键字查询日志：
	1.单文件：vi或vim编辑器打开文件。在查看模式下，“/关键字”向下查找，“?关键字”向上查找
	2.多文件：grep ERROR /var/log/messages* #匹配到ERROR这个关键字的行和所在的日志文件直接输出到屏幕
	3.cat命令查看。如cat xx.log | grep key 等价于 grep key xx.log


********************
cat命令查询内容

问：显示一个文件的第2000-5000行？
	> cat file | head -n 5000 | tail -n +2000 #显示20000行到5000行
	说明：
		tail -n +2000 表示从2000行开始显示
		tail -n 2000 表示显示文件最后2000行，差别很大
	> cat file | tail -n +2000 | head -n 5000 #从第2000行开始，共显示5000行，也就是2000~6999行！


********************
tail查询日志
	tail -1000f xx.log	#实时刷新最新的1000行日志
	tail -1000f xx.log | grep [关键字] #查找最新1000行中与关键字匹配的行
	tail -100f xxx.log | grep '2019-10-29 16:4[0-9]' #查找最新的100行中时间范围在2019-10-29 16:40-2019-10-29 16:49范围中的行
	tail -1000f xxx.log | grep -A 5 [关键字] #查看最新的1000行中与关键字匹配的行加上匹配行后的5行

如何在log文件中搜索找出error的日志？
	描述：more、tail、vi 但是由于日志太大了，而我只需要记录ERROR信息就可以了，有什么办法或命令能够从后向前查看日志中最后记录的一个ERROR信息的办法呢？
	> tail -100 |grep error #查看最后100条日志中并过滤出包含error内容的

********************
find查找文件
	> find . -type f -size +100M 	--查找大小超过5M的文件
	> find /etc -name tnsnames.ora		--查找etc目录的tnsnames.ora文件
	> find / | grep nginx.conf #查找根目录/及其子目录下名为nginx.conf的文件


找出占用空间最大的文件：
	> find / -type f -size +10G #找出大于10G的文件

将当前目录下以“.log”结尾且修改时间大于90天的5G以上的大文件并删除：
	find ./ -name "*.log" -type f -mtime +90 -size +10G -maxdepth 1 -print -exec rm {} \;
	说明：
		-name "*.log":按名称查找如果忽略大小写则用-iname，注意引号别丢
		-type f:文件类型限定为文件，目录是d
		-mtime +90:修改时间大于90天。-n指n天以内
		-size +10G:文件大小过滤
		-maxdepth 1:限制查找最大深度，当前目录是1
		-print:将找到的文件以相对路径的形式打印
		-exec rm {}; 找到的文件将执行删除命令，最后是"空格"+{}+"分号;"都不能省。
		补充：
			若是删除文件用rm -rf
			若想要删除前确认，将“-exec rm {} ;”替换成“-ok rm {} ;”


************
sed命令
	--利用脚本处理文本文件
实例：
	#将redis.conf的7000替换为7001，并以新文件保存
	sed 's/7000/7001/g' redis.conf > /myredis/redis7001/redis.conf 


********************
其它命令：
	> top 	--查看资源占用率
	> free 	--查看总内存、使用、空闲情况
	> pwd	--查看当前目录
	> tar -zxvf nginx.tar.gz	--解压包

问：怎么查看进程和杀死进程？
	> ps -ef | grep java --查看Java进程
	> kill -9 [pid] #进程号 --杀死进程，“-9”强迫进程立即停止

问：打印一个文件夹的所有文件？
	ll ls


