redis应用场景：
	缓存（热门数据）
	分布式锁
	集群时session共享


关系型数据库的优势，解决什么问题？

redis和memcached有什么区别？
	数据类型：redis支持多种数据类型，memcached仅支持简单key/value数据类型。
	数据持久化：redis支持rdb和aof两种。memcached不支持数据持久化
	运行模型：redis使用单线程，而memcached使用多线程。redis使用单核，而memcached可利用多核。在处理小的文件时redis会比memcached有更高的效率，但是在100K以上时，memcached的效率就会更高一些。
	都可以集群，不过在100k以上的数据中，memcached性能要高于redis



基于内存为什么会快？
	内存与CPU直接交换数据，所以内存越大，运行速度越快。
	计算机处理数据的基本原理：硬盘数据<-->内存<-->CPU


redis操作怎么保证原子性的？
	答：redis单线程


redis为什么采用单线程？
	官方答案：reids基于内存操作，CPU不是redis的瓶颈，redis的瓶颈最有可能是机器内存的大小或网络带宽。
	1、代码更清晰，处理逻辑更简单
	2、不需考虑各种锁问题，不存在加锁释放锁操作，不存在死锁问题。
		redis有list、hash等复杂结构，这些结构可能进行很细粒度操作，因此可能需要考虑各种加锁控制和死锁问题。
	3、采用单线程，避免了不必要的上下文切换和竞争关系，也不存在多进程或多线程导致切换而消耗CPU。
	问：若让CPU成为redis瓶颈，或不想让服务器其它CPU闲置，那怎么设置？
		可以考虑起几个redis进程，redis是key-value数据库，不是关系型数据库，数据之间没有约束。只要客户端分清哪些key放在哪个redis进程即可。
	问：单进程单线程弊端
		无法发挥多核CPU性能，不过可以通过在单机开多个Redis实例来完善。

Redis单线程为什么能达到10W吞吐量？
	1、redis基于内存，内存的读写速度非常快；
	2、redis是单线程，省去了很多上下文切换线程的时间；
	3、redis采用网络IO多路复用技术，来保证多连接时的系统高吞吐量。


redis事务



IO多路复用技术：
	多路-指多个socket连接；复用-复用一个线程；采用IO多路复用技术可以让单个线程高效的处理多个连接请求，使用单线程来轮询描述符，将数据库的开、关、读、写都转换成事件。
	多路复用主要有三种技术：select、poll、epoll。epoll是最新的也是目前最好的多路复用技术。

reds持久化方式？
	两种：rdb、aof
	区别：rdb存数据，aof存写操作命令


如何从10W个key中找到某个固定前缀开头的key？
	方式一：使用keys指令，匹配固定前缀
		redis是单线程的，keys指令会导致线程阻塞，线上服务会停顿，直到指令执行完毕后恢复
	方式二：使用scan指令
		scan指令可以无阻塞的提取指定模式的key列表，但会有一定的重复，需在客户端去重，其整体所花费的时间比key指令长。



redis的主从复制实现（旧版）？
	--数据同步
	a.从节点连接主节点，发送sync命令（写缓存命令）；
	b.主节点接收到sync命令后，开始执行bgsave命令生成rdb文件，并使用缓冲区记录此后执行的所有写命令。
		附：bgsave命令用于后台异步保存当前数据库的数据到磁盘。redis fork出一个新子进程，原来redis进程（父进程）继续处理客户端请求，而子进程则负责将数据保存到磁盘，然后退出。
	c.主节点bgsave执行完后，向所有从节点发送rdb文件。
	d.从节点接收到rdb文件后丢弃所有旧数据，载入rdb文件的数据。
	--命令同步
	e.主节点rdb文件发送完后，开始向从服务器发送缓冲区的写命令。
	f.从节点完成rdb数据载入后，开始接收命令请求，并执行来自主节点缓冲区的写命令。
redis旧版主从复制可能出现问题？
	若从节点完成了rdb文件的数据同步后，主节点因网络原因中断复制，从节点重新连接后会再次发送sync命令，再次进行rdb数据同步。
redis新版主从复制实现？
	Redis从2.8版本开始，使用psync命令代替sync命令来执行复制时的同步操作。
	psync分为完整重同步（full resynchronization）和部分重同步（partial resynchronization）两种模式。
	完整重同步：和sync的rdb数据同步一样
	部分重同步：用于处理断线后重复制情况，主节点只将断线期间的写命令发送给从服务器执行。



redis主从复制性能问题：
	1.master最好不要做任何持久化工作，如rdb和aof操作；
	2.若数据比较重要，某个slave开启aof备份数据，策略设值为每秒同步一次；
	3.master和slave最好在同一局域网内
	4.尽量避免在压力很大的主库上增加从库
	5.主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <- Slave1 <- Slave2 <- Slave3...


redis集群模式实现？
	有三种实现：twemproxy、codis、redis自带
	redis cluster3.0自带集群：在redis集群内置很多哈希槽，redis会根据节点数量大致将哈希槽平均分配到不同节点上。当放置一个key-value时，redis会对key进行哈希求值，然后除所有哈希槽求得余数，根据余数得到应放置在哪个节点上。

redis的key如何寻址？
	类似于HashMap的寻址方式。



redis实现分布式锁？
	在redis里创建一个key算加锁，完成相关操作后删除该key算释放锁。
	加锁：set my:lock:类名:方法名 EX 30 NX //30秒后自动释放，其它线程尝试加速时会失败
	解锁：del my:lock:类名:方法名
	附：set语法> set key value [EX seconds] [PX milliseconds] [NX|XX]
		EX seconds:设置过期时间为seconds秒。执行 set key value EX seconds 等同于 setex key seconds value
		PX milliseconds：设置过期时间为milliseconds毫秒。执行 set key value PX milliseconds 等同于 psetex key milliseconds value
		NX:若key不存在时设置成功
		XX:若key存在时才设置成功
	问：zk实现分布式锁比较？


redis实现异步队列？
	list支持双端操作，一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息时，要适当sleep一会再重试。
	若不使用sleep，可以用blpop指令，在没有消息时它会阻塞直到消息到来。
	问：生产一次，消费多次？
		使用pub/sub主题订阅者模式，可以实现 1:N 的消息队列。
		缺点是消费者下线，消息会丢失，得使用专业的消息队列如RocketMQ等。


redis过期策略及内存淘汰机制？
过期策略：
	redis采用定期删除+惰性删除策略。
	定期删除：指redis默认每隔10ms就随机抽取一些设置了过期时间的key，检查其是否过期，若过期就删除。不检查全部是为了避免redis卡死，部分未删除则根据惰性删除策略。
	惰性删除：在你获取某个key时，redis会检查其是否过期，若过期则此时删除，并不会返回任何东西。
	注：这样该删除的key可能还未删除，而导致redis内存越来越大，那么就该使用淘汰策略机制。
内存淘汰：
	# maxmemory-policy volatile-lru //在redis.conf配置
	--参数说明：
	noeviction 		内存不足时，写入报错
	allkeys-lru 	内存不足时，会移除最近最少使用的key。推荐使用。
	allkeys-random	内存不足时，随机移除某个key
	volatile-lru	内存不足时，在设置了过期时间的键空间中移除最近最少使用的key。这种情况一般是redis既当缓存，又做持久化存储时使用。
	volatile-random	内存不足时，在设置了过期时间的键空间中随机移除某个key。
	volatile-ttl	内存不足时，在设置了过期时间的键空间中优先移除有更早过期时间的key。


save和bgsave区别？
	save：由于redis单线程，save会造成阻塞，在rdb文件创建完成之前不处理任何请求。
	bgsave：会创建子进程，完成rdb文件的创建工作，父进程正常执行。
		在执行bgsave期间，主线程会拒绝save和bgsave命令；bgrewriteaof命令会延迟到bgsave命令结束之后执行。


redis缓存相关问题：
	缓存和数据库双写一致性问题、缓存并发更新顺序问题、缓存穿透、缓存雪崩、缓存预热
	详情参考《redis学习.docx》
	缓存穿透问题？
		概念：访问不存在的数据，缓存不起作用，导致请求穿透到数据库，若存在大量这样的请求会导致数据库崩溃。
		解决：1、使用布隆过滤器，存储可能存在的key 2、将该key存下来，value为空对象，但设置较短的过期时间。这样第二次访问时缓存就有值了。
	缓存雪崩问题？
		若大量key同一时间失效，redis可能会出现短暂的卡顿现象，严重时可能会出现缓存雪崩。
		概念：缓存失效时间过于集中，导致大量请求到达数据库，导致数据库崩溃。
		解决：1、缓存失效时间增加1~5分钟随机值 2、数据库限流（加锁、或队列）



redis线程模型：
	文件事件处理器：redis基于Reactor模式开发了自己的网络事件处理器。其主要包括4部分：套接字(socket)、IO多路复用程序、文件事件分派器(dispatcher)、事件处理器
	工作原理：
		IO多路复用程序：负责监听多个套接字，并向文件事件分派器传送那些产生了事件的套接字。
		文件事件分派器：接收IO多路复用程序传过来的套接字，并根据套接字产生的事件类型调用相应的事件处理器。
	IO多路复用程序实现？



















