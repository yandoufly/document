标题：多线程处理未知个数的任务，全部完成后打印结果
链接：https://github.com/sunwu51/notebook/issues/5

描述：
	例如这样场景：文件每一行是个url，记录有多少个返回结果是200成功，有多少是其他状态码。
	注意：
		文件很大，还可能经常更换，不知道文件一共有多少行。
		需要尽快完成任务，单线程就很拉胯，需要用多线程。
	一个重点是线程池该如何定制参数，另一个重点则是如何知道所有任务结束了。


一、线程池参数设定：
	用newCacheThreadPool或者newFixedThreadPool都是不合适的，前者会一直创建新线程直到创建int最大值个线程，之后再有线程就会抛异常然后程序就炸了。后者可以创建固定的线程数，但是如果超过这个数就会扔到队列LinkedBlockingQueue，这个队列也是最大只能int最大值个，仍有上面的问题。

	在当前场景下，我们可以对newCacheThreadPool或者newFixedThreadPool进行结合，模仿后者创建固定个数的线程，但是队列我们采用前者的空队列，这时候会在到达指定个数后reject，对于reject策略我们可以使用ThreadPoolExecutor.CallerRunsPolicy。这样在超出线程个数的时候，就会由创建线程的线程（主线程）来执行当前任务，因为"生产者"去帮忙"消费"了，所以生产任务就暂停了，这样起到一个负反馈的作用，使在工作的线程使用不超过101个。
	--线程池代码如下
	ThreadPoolExecutor threadPool = new ThreadPoolExecutor(100,100,0, TimeUnit.SECONDS,new SynchronousQueue<>(), new ThreadPoolExecutor.CallerRunsPolicy())

二、如何知道所有任务结束：
即整个程序大概是这样的：
// 用于记录200状态码，和其他状态码的数量
AtomicInteger okCount = new AtomicInteger();
AtomicInteger otherCount = new AtomicInteger();

String line = null;

while( (line = readLine(file)) !=null){
    String tmp = line;

    threadPool.execute(()->{
        // 对每一行进行处理
        process(tmp,okCount,otherCount );
    });
}

System.out.println("ok个数"+okCount.get()+" 不ok的个数"+otherCount);

但打印结果这一行可能有问题，例如最后100个url的请求时间超级长，这100个线程创建完之后，就到了打印这一行了但是还没执行完，这样结果就是错的。常规思路下，计数器CountDownLatch是最佳选择，但是当前题目无法获知文件大小，而计数器必须一开始就指定计数的大小。这怎么解决呢？

当然思路是很多的，例如最简单的能想到的，就是在打印前判断线程池中活跃线程>0，就sleep。
while(threadPool.getActiveCount()>0){
    Thread.sleep(1000);
}
这样做不是特别的好，首先是这个getActiveCount拿到的个数是个大约的值，不保证准确，其次sleep的时长如何设定是恰当的有待商榷。我比较喜欢的做法是利用相位器Phaser。

代码如下：
	AtomicInteger okCount = new AtomicInteger();
	AtomicInteger otherCount = new AtomicInteger();

	String line = null;

	// 创建数为1的相位器，不设置为0，是因为如果相位器总数从1减到0时，会导致阶段变为负数。1是个保护屏障。
	Phaser phaser = new Phaser(1);

	while( (line = readLine(file)) !=null){
	    String tmp = line;
	    // 每一行内容读出来时相位器总数+1
	    phaser.register();
	    threadPool.execute(()->{
	        // 对每一行进行处理
	        process(tmp,okCount,otherCount );
	        // 处理完一行相位器总数-1
	        phaser.arriveAndDeregister();
	    });
	}

	// 因为初值设为1，所以最后需要arrive一次
	phaser.arrive();
	phaser.awaitAdvance(0);

	System.out.println("ok个数"+okCount.get()+" 不ok的个数"+otherCount);


