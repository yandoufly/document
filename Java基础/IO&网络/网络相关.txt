*******************tcp************************
TCP和UDP区别？
	1、tcp(Transmission Control Protocol):传输控制协议
		出现原因：应用层需要可靠的连接，但网络层ip没有这样的流机制，因而需要传输层的tcp协议
		特点：传输层协议，面向连接、可靠，基于字节流。
		面向连接：即客户端和服务器之间发送数据必须要先建立连接。
		可靠：通过tcp传输的数据，无差错，不丢失，不重复，且按序到达
		tcp连接建立：使用三次握手建立连接。
		tcp终止连接：使用四次挥手种植连接
	2、udp(User Datagram Protocol):用户数据报协议
		特点：传输层协议，无连接，提供面向事务的简单的不可靠的传输。
		udp无连接，通讯质量要求不高，网路速度要求高。用于语音、视频、流，多对多
	3、区别：
		每一条tcp连接只能是点到点的（一对一），udp支持一对一、一对多和多对多的监护通信。


问：三次握手、四次挥手流程？
三次握手流程：
	概念：建立tcp连接需要三次握手，指建立一个TCP连接时，需要客户端和服务器总共发送3个包。
	1.建立连接时，客户端发送SYN包到服务器，并进入SYN_SEND状态，等待服务器响应、确认(SYN=1 Seq=X)
	2.服务器收到SYN包，应答客户端的SYN(ACK=X+1)，同时自己也发送一个SYN包，即SYN+ACK包此时服务器进入SYN_RECV状态(SYN=1 ACK=X+1 Seq=Y)
	3.客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=Y+1)，此包发送完毕客户端和服务器端进入ESTABLISHED状态，完成三次握手(ACK=Y+1 Seq=Z)
四次挥手流程：
	1.客户端发送FIN，用来关闭客户端到服务器的数据传送；
	2.服务器收到FIN后，回应ACK。确认序号为收到的序号+1。
	3.服务器发送FIN，用来关闭服务器到客户端的数据传送；
	4.客户端回应ACK，并将确认序号设置为收到的序号+1。
相关问题：
问：为什么需要三次握手，明明两次就可以建立起连接？
	握手即一次发包到接收的过程。可能从客户端发送到服务端，也可能从服务端发送到客户端。
	前两次握手为了保证服务端能收到客户端的信息并能做出正确的响应，后两次握手为了保证客户端能够收到服务端的信息并能做出正确的响应

问：为什么需要四次挥手？
	关闭连接时，当服务器收到FIN报文时，很可能并不会立即关闭socket，所以先回复一个ack报文，告诉客户端已接收到FIN报文。只有等服务器所有的报文都发送或接收完，才能发送给客户端FIN报文，因此需要四次挥手。
	举例：A和B打电话，通话即将结束后，A说“我没啥要说的了”，B回答“我知道了”，但是B可能还会有要说的话，A不能要求B跟着自己的节奏结束通话，于是B可能又巴拉巴拉说了一通，后B说“我说完了”，A回答“知道 了”，这样通话才算结束。

问：TCP三次握手数据丢失了怎么办？那如果后面又找到了呢？

问：三次握手过程中可以携带数据吗？
	第三次握手可以携带数据的，前两次不行。

问：http三次握手中服务器没收到第三个数据包怎么办？
	DDos攻击。

其它问题：
	讲一讲TCP协议的三次握手和四次挥手流程。
	为什么TCP建立连接协议是三次握手，而关闭连接却是四次握手呢？为什么不能用两次握手进行连接？
	为什么TCP TIME_WAIT状态还需要等2MSL后才能返回到CLOSED状态？
	什么是DoS、DDoS、DRDoS攻击？如何防御？

DDos定义：
	客户端向服务端发送连接请求数据包1，服务端向客户端回复连接请求数据包2，然后服务端等待客户端发送连接数据包3。若客户端不向服务端发送数据包3，则服务端等待30s后才将此链接关闭。当大量的请求只进行到第二步，而不进行第三步，服务端又大量的资源等待数据包3，则造成DDos攻击。
	DDos攻击最常用的是使用SYN-Flood进行攻击。SYN-Flood不会完成TCP三次握手的第三步，也就是不发送确认连接的信息给服务器。这样，服务器无法完成第三次握手，但服务器不会立即放弃，服务器会不停的重试并等待一定的时间后放弃这个未完成的连接，这段时间叫做SYN timeout，这段时间大约30秒-2分钟左右。若是一个用户在连接时出现问题导致服务器的一个线程等待1分钟并不是什么大不了的问题，但是若有人用特殊的软件大量模拟这种情况，那后果就可想而知了。一个服务器若是处理这些大量的半连接信息而消耗大量的系统资源和网络带宽，这样服务器就不会再有空余去处理普通用户的正常请求（因为客户的正常请求比率很小）。这样这个服务器就无法工作了，这种攻击就叫做:SYN-Flood攻击。
DDos预防？
	--没有根治的办法，除非不用tcp/ip链接。
	缩短半连接的timeout时间；
	限制特定ip短地址的访问；
	启用防火墙的防DDos属性；
	严格限制对外开放的服务器的向外访问。


TCP半连接队列和全连接队列：
	在TCP三次握手时，Linux内核会维护两个队列，分别是：
		半连接队列，也称SYN队列；
		全连接队列，也称accept队列。
	流程：服务端收到客户端发起的SYN请求后，内核会把该连接存储到半连接队列，并向客户端响应SYN+ACK，接着客户端会发送ACK给服务端，服务端收到第三次握手的ACK后，内核会把连接从半连接队列移除，然后创建新的完全连接，并将其添加到accept队列，等待进程调用accept方法把连接取出来。
	不管是半连接队列还是全连接队列，都有最大长度限制，超过限制时，内核会直接丢弃，或返回RST包。


wrk工具：它是一款简单的http压测工具，能够在单机多核CPU的条件下使用系统自带的高性能IO机制，通过多线程和事件模式，对目标机器产生大量的负载。



问：tcp如何保证可靠性传输？
	思路：给每个数据包分配一个序列号，并等待接收主机对这些数据包全部确认。
	数据包校验、超时重传机制、应答机制、对失序数据包重排序、tcp还能提供流量控制	
问：tcp如何保证包的顺序传输？tcp怎么保证有序传输的？
	1.主机每次发送数据时，tcp就给每个数据包分配一个序列号并且在一个特定的时间内等待接收主机对分配的这个序列号进行确认。如果发送主机在一个特定时间内没有收到接收主机的确认，则发送主机会重传该数据包；
	2、接收主机利用序列号对接收的数据进行确认，以便检测对方发送的数据是否又丢失或乱序等；接收主机一旦收到已经顺序化的数据，就将这些数据按正确的顺序重组成数据流并传到高层进行处理。
	--具体步骤：
	1、为了保证数据包的可靠传递，发送方必须把已发送的数据包保留在缓冲区，并为每个已发送的数据包启动一个超时定时器，若在定时器超时之前收到对方发来的应答信息，则释放该数据包占用的缓冲区，否则重传该数据包，直到收到应答或重传次数超过规定的最大次数为止；
	2、接收方收到数据包后，先进行CRC校验，若正确则把数据交给上层协议，然后给发送方发送一个累计应答包，表明该数据已接收，若接收方正好也有数据要发给发送方，应答包也可在数据包中稍带过去。
	CRC(Cyclic Redundancy Check,循环冗余校验)
问：若没有给数据包做顺序化有什么问题？
	可能造成数据包的重传（原因：接收方来及时做已接收应答）、顺序的颠倒甚至数据包丢失。
问：若tcp接收方突然故障，会发生什么？
	重传
问：tcp的重传机制？


tcp流量控制：
	描述：如果发送者发送数据过快，接收者来不及接收，那么就会有分组丢失。流量控制策略就是控制发送者的发送速度，使得接收者来得及接收，达到不丢失分组的目的。
	流量控制实现：使用滑动窗口机制（也叫接受窗口rwnd）实现。
滑动窗口：
	主机A向主机B发送数据，开始双方确定的窗口值为400字节，这两个是前提条件。
	开始A发送了200字节，之后发生了分组丢失现象，B调整接受窗口大小为300字节。
	之后A又连续发送了300字节，此时A已经不能发送数据，需等待B的窗口信号。
	之后B调整窗口为100字节。
	B接收到100字节数据后，调整窗口值为0，表示暂时不想接受数据。
	总共B调整了三次窗口大小，进行了三次流量控制。


问：讲下tcp拥塞机制？
拥塞怎么处理？
	滑动窗口
问：TCP的拥塞控制、流量控制详细说明？
	拥塞指在某段时间，若对网络中某资源的需求超过了可用部分，导致网络拥塞，所以出现了拥塞控制机制。
	拥塞控制：就是防止过多的数据注入网络中，这样可以使网络中的路由器或链路不致过载。
	TCP的拥塞控制有4个核心算法组成，慢启动，拥塞避免，快速重传，快速回复


问：TCP滑动窗口协议？
	滑动窗口（Sliding window）是一种流量控制技术。
	早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据，由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制。
	我们发送的数据并不是一口气传输给接收方，如果一下子发送所有的数据只会加大网络压力，造成丢包重试，轻则传输更慢，重则网络崩溃。
	TCP是顺序发送的，操作系统将这些数据包一批一批的发送给对方，就像一个窗口，不停地往后移动，所以称为TCP滑动窗口协议。

问：TCP的同传，拆包与组装包是什么意思？
问：tcp沾包问题？
	tcp沾包指发送方发送若干包数据到达接收方时沾成一包。
	socket网络编程中，都是端到端通信，由客户端端口+服务端端口+客户端ip+服务端ip+传输协议组成五元组。发送端为了将多个发往接收端的包，更加高效的的发给接收端，于是采用了优化算法（Nagle算法），将多次间隔较小、数据量较小的数据，合并成一个数据量大的数据块，然后进行封包。


问：服务端怎么检测tcp连接已超时？什么时候可以销毁释放？
	标准tcp协议里把对方设为2小时，若服务器超过2小时还没有收到客户端消息，它就发送探测报文段，若发送了10个探测报文段（每一个相隔75s）还没有收到响应，就假定该客户端出了故障，并终止这个连接。


问：知不知道time_wait状态，这个状态出现在什么地方，有什么用（参考quic）？


问：什么是tcp/ip协议族？
	tcp/ip模型包含了tcp、ip、udp、telnet、ftp、smtp等上百个互为关联的协议，其中tcp和ip是最常用的两种底层协议，所以把它们统称为“tcp/ip 协议族”。
问：tcp/ip协议按层次划分了哪几层？各层的作用是什么？
	按层次分为4层：应用层、传输层、网路层、数据链路层
	应用层：向用户提供应用服务时的活动。如fpt(文件传输协议)、dns(域名系统)、http
	传输层：提供处在网络链接中的两台计算机之间的数据传输。如tcp(传输控制协议)、udp(用户数据协议)
	网络层：用来处理网络上流通的数据包，数据包是网络传输的最小单位，该层规定了通过怎样的路径到达对方计算机，并把数据包传送给对方
	数据链路层：用来处理连接网路的硬件部分。

问：请画出并说明http请求时，tcp/ip通信传输流？
	ip协议位于网络层，tcp协议位于传输层

问：什么是字节流服务？

*******************http协议************************

问：tcp协议和http协议区别？
	http是应用层协议，规定了数据格式；tcp是传输层协议，用于数据传输。
	应用层的http协议是无状态的，但可以使用cookie和session来保存请求之间的关系。
	一般把“面向连接”来描述传输层的tcp协议，tcp是有状态的，tcp连接过程中有三次握手，因为通信两端需要维护一个tcp的状态机。

问：http和https区别？
	http端口为80，https端口为443。
	http运行在tcp之上。所有传输的内容都是明文。
	https运行在ssl/tls之上，而ssl/tls运行在tcp之上。所有传输的内容都经过加密。
	https加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。
	https协议需要到ca申请证书，一般免费证书很少，需要交费。

问：http1.0与http1.1区别？
	http1.0默认短链接，设置为长连接需在响应头配置“Connection: keep-alive”。
	http1.1默认长连接，在一个tcp连接上可以传送多个http请求和响应，减少了建立和关闭连接的消耗和延迟。
	http1.1采用流水线的持久连接，即客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序一次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著减少了整个下载过程所需要的时间。

问：http发展到1.1仍存在哪些问题？
	1、线头阻塞：tcp连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。
	2、多个tcp连接：虽然http1.1管道化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化，所以1.1版本请求并发依赖于多个tcp连接。
	3、头部冗余，采用文本格式


问：Http Pipelining 管线化技术？
	即将多个http请求整批提交。使用Http Pipelining技术之后，某个连接上的消息变成了类似这样的请求1->请求2->请求3->响应1->响应2->响应3。
	虽然http1.1管道化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化，所以1.1版本请求并发依赖于多个tcp连接。

*****************************************************
其它：
什么ARQ协议？
	ARQ(Automatic Repeat-reQuest, 自动重传请求)，是OSI模型的数据链路层的错误矫正协议之一。
什么是DNS服务(Domain Name System, 域名系统)？
	是将域名和IP对应的网络服务，让用户在访问网站时，不再需要输入冗长难记的IP地址，只需要输入域名即可访问。
什么RFC？
get和post区别？
如何知道连接是恶意的还是正常的？
五种网络IO模型，及select、poll、epoll的区别？
Http和Https区别？Http1.0,1.1,2.0特点？讲下长连接和短连接？Https中篡改了公钥呢？怎么防止？
学过计算机网络是吧？socket熟悉吗？对它的读写缓冲区有理解吗？怎么的？那滑动窗口是怎样的？为什么这样设计？
