标题：2的幂次表示
问题描述
　　任何一个正整数都可以用2进制表示，例如：137的2进制表示为10001001。
　　将这种2进制表示写成2的次幂的和的形式，令次幂高的排在前面，可得到如下表达式：137=2^7+2^3+2^0
　　现在约定幂次用括号来表示，即a^b表示为a(b)
　　此时，137可表示为：2(7)+2(3)+2(0)
　　进一步：7=2^2+2+2^0 （2^1用2表示）
　　3=2+2^0
　　所以最后137可表示为：2(2(2)+2+2(0))+2(2+2(0))+2(0)
　　又如：1315=2^10+2^8+2^5+2+1
　　所以1315最后可表示为：
　　2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)
输入格式
　　正整数（1<=n<=20000）
输出格式
　　符合约定的n的0，2表示（在表示中不能有空格）
样例输入
137
样例输出
2(2(2)+2+2(0))+2(2+2(0))+2(0)
样例输入
1315
样例输出
2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)

提示
	用递归实现会比较简单，可以一边递归一边输出

代码实现：
public class Test07 {

	public static void main(String[] args) {
		int n = 137;
		List<String> strList = new ArrayList<String>();
		cimi(strList, n);
		System.out.println();
		for (String str : strList) {
			System.out.println(str);
		}
	}

	private static void cimi(List<String> strList, int n) {
		int counter = 0, j, index = 0;
		int[] a = new int[16]; // 最长16位
		while (n > 0) { // 求幂
			j = n % 2;
			if (j == 1) {
				a[index++] = counter;
			}
			counter++; // 计数
			n /= 2;
		}
		strList.add(Arrays.toString(a));
		for (int i = (index - 1); i >= 0; i--) {
			if (a[i] == 0) {
				System.out.print("2(0)");
			} else if (a[i] == 1) {
				System.out.print("2");
			} else if (a[i] == 2) {
				System.out.print("2(2)");
			} else if (a[i] > 2) {
				System.out.print("2(");
				cimi(strList, a[i]);
				System.out.print(")");
			}
			if (i != 0) {
				System.out.print("+");
			}
		}
	}
}