未整理：
	https://zhuanlan.zhihu.com/p/84882320?utm_source=ZHShareTargetIDMore&utm_medium=social&utm_oi=965555060286144512

动态规划(dp)
	详情：https://www.zhihu.com/question/23995189/answer/613096905
	定义：能将大问题拆分成几个小问题，且满足无后效性、最优子结构性质。

特点：
	重叠子问题：不同的问题，可能都要求1个相同问题的解。
	最优子结构：大问题的最优解可以由小问题的最优解推出。
	无后效性：若给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各阶段状态的影响。

案例：
凑纸币问题：
	描述：用面值1、5、11的钞票凑出来某个金额w，需要用到尽量少的钞票。
	核心代码：f(n) = min{f(n-1), f(n-5), f(n-11)} + 1
DAG最短路径：


最小路径和
	详情：https://leetcode-cn.com/problems/minimum-path-sum/
	描述：找出一条从左上角到右下角的路径，路径上数字之和最小。每次只能向下或向右移动一步。
	如m*n二维数组gird为[[1,3,1], [1,5,1], [4,2,1]]，最短路径和为7，路径为1->3->1->1->1
	解决：二位动态规划
		设从grid[0,0]到grid[m, n]的最短路径为f(m, n)，而grid[n, m]只能是从grid[n-1][m]或gird[m, n-1]走到。
		核心代码：f(m, n) = grid[m, n] + min{f(m-1, n), f(m, n-1)}
	源代码：
		public int minPathSum6(int[][] grid) {
			int row = grid.length, col = grid[0].length;
			int[][] dp = new int[row][col];

			// 初始化
			dp[0][0] = grid[0][0];
			for (int j = 1; j < col; j++)
				dp[0][j] = grid[0][j] + dp[0][j - 1];
			
			for (int i = 1; i < row; i++) {
				dp[i][0] = grid[i][0] + dp[i - 1][0];
				for (int j = 1; j < col; j++) {
					dp[i][j] = grid[i][j] + Math.min(dp[i - 1][j], dp[i][j - 1]);
				}
			}
			return dp[row - 1][col - 1];
		}


问：最大子序列和（动态规划）
	描述：给定数组nums，找到一个具有最大和的连续子数组，返回其最大和。
	示例：
		输入：[-2,1,-3,4,-1,2,1,-5,4]
		输出：6
		解释：连续子数组[4,-1,2,1]的和最大，为6

	实现思路：
		用数组d[i]来保存当前最大的连续子数组，循环遍历每个数，然后每次检查d[i-1]是否大于0，是则d[i]=d[i-1]+nums[i]；否则d[i]=nums[i]。
	
	算法核心：d[i] = d[i-1] >= 0 ? d[i-1] + nums[i] : nums[i];
	走一遍流程：
		[-2]						//d[0]=-2;初始化，这里仅有一个数，它就是最大连续子数组；
		[-2,1]						//d[1]=nums[0]=1;d[0]<0；前面最大连续是负数，加上它们会变小
		[-2,1,-3] 					//d[2]=d[1]+nums[2]=-2;d[1]=1>=0；前面的最大连续是正数，加上它们会变大
		[-2,1,-3,4] 				//d[3]=nums[3]=4;
		[-2,1,-3,4,-1] 				//d[4]=d[3]+nums[4]=3;
		[-2,1,-3,4,-1,2]			//d[5]=d[4]+nums[5]=5;
		[-2,1,-3,4,-1,2,1]			//d[6]=d[5]+nums[6]=6;
		[-2,1,-3,4,-1,2,1,-5]		//d[7]=d[6]+nums[7]=1;
		[-2,1,-3,4,-1,2,1,-5,4]		//d[8]=d[7]+nums[8]=5;


1、思考状态

状态先尝试“题目问什么，就把什么设置为状态”。然后考虑“状态如何转移”，如果“状态转移方程”不容易得到，尝试修改定义，目的仍然是为了方便得到“状态转移方程”。

2、思考状态转移方程（核心、难点）

状态转移方程是非常重要的，是动态规划的核心，也是难点，起到承上启下的作用。

技巧是分类讨论。对状态空间进行分类，思考最优子结构到底是什么。即大问题的最优解如何由小问题的最优解得到。

归纳“状态转移方程”是一个很灵活的事情，得具体问题具体分析，除了掌握经典的动态规划问题以外，还需要多做题。如果是针对面试，请自行把握难度，我个人觉得掌握常见问题的动态规划解法，明白动态规划的本质就是打表格，从一个小规模问题出发，逐步得到大问题的解，并记录过程。动态规划依然是“空间换时间”思想的体现。

3、思考初始化

初始化是非常重要的，一步错，步步错，初始化状态一定要设置对，才可能得到正确的结果。

角度 1：直接从状态的语义出发；

角度 2：如果状态的语义不好思考，就考虑“状态转移方程”的边界需要什么样初始化的条件；

角度 3：从“状态转移方程”方程的下标看是否需要多设置一行、一列表示“哨兵”，这样可以避免一些边界的讨论，使得代码变得比较短。

4、思考输出

有些时候是最后一个状态，有些时候可能会综合所有计算过的状态。

5、思考状态压缩

“状态压缩”会使得代码难于理解，初学的时候可以不一步到位。先把代码写正确，然后再思考状态压缩。

状态压缩在有一种情况下是很有必要的，那就是状态空间非常庞大的时候（处理海量数据），此时空间不够用，就必须状态压缩。



动态规划相关问题：
	--1）01背包问题，6个问题
		0/1背包问题
		相等子集划分问题
		子集和问题
		子集和的最小差问题
		相等子集和的个数问题
		寻找目标和问题
	--2）无限背包，5个问题
		无限背包
		切钢条问题
		换硬币问题
		凑齐每个数需要的最少银币问题
		丝带的最大值切法
	--3）斐波那契数列，6个问题
		斐波那契数列
		爬楼梯问题
		分解因子问题
		蛙跳最小步数问题
		蛙跳带有代价的问题
		偷房子问题
	--4）回文子系列，5个问题
		最长回文子序列
		最长回文子字符串
		最长子字符串的个数问题
		怎么删掉最少字符构成回文
		怎么分配字符，形成回文
	--5）最长子字符串系列，13个题
		最长相同子串
		最长相同子序列
		字符串变换
		最长上升子序列
		最长上升子序列和
		最短超级子序列
		最少删除变换出子序列
		最长重复子序列
		子序列匹配
		最长字节子序列
		最长交差变换子序列
		编辑距离
		交织字符串


***********************************************
最长相同子串：
	描述：给定两个字符串，输出最长相同子串。
	
	实现：创建二维表，用来存储字符A[i]和B[j]是否相等，是则表中(i,j)位置为1。遍历结束后，对角线上连续1的个数就是相同的子串。
	优化：实现1的在遍历结束后，还需要计算二维表对角线上连续1的个数。现在换一种思路，在遍历的同时计算当前对角线的值，然后用一个变量res记录最大值即可。公式为：若A[i]==B[j]，则dp[i][j] = dp[i-1][j-1]+1。
	再优化：在dp[i][j]赋值时需要注意i和j的边界问题，我们可以将二维表dp设置为dp[a.length+1][b.length+1]，A[i]==B[j]是赋值到dp[i+1][j+1]中
	源代码：
		public String lagestcommonsubset(String a, String b) {
			int m = a.length(), n = b.length();
			int[][] dp = new int[m+1][n+1];

			int maxLen = 0, lastIndex = -1;
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (a.charAt(i) == b.charAt(j)) {
						dp[i+1][j+1] = dp[i][j] + 1;
						if (dp[i+1][j+1] > maxLen) {
							maxLen = dp[i+1][j+1];
							lastIndex = i;
						}
					}
				}
			}
			return a.substring(lastIndex+1-maxLen, lastIndex+1);
		}

实例：字符串A=abcde 字符串B=abgde
	实现：二维表dp如下所示，求出对角线连续1的个数就是公共子串。
	核心代码：
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (a.charAt(i) == b.charAt(j)) {
					dp[i][j] = 1;
				}
			}
		}
	dp数据如下：
		1, 0, 0, 0, 0
		0, 1, 0, 0, 0
		0, 0, 0, 0, 0
		0, 0, 0, 1, 0
		0, 0, 0, 0, 1

	优化：二维表dp如下所示，这个缺点是dp[i][j]赋值时要注意i和j的边界问题
	核心代码：dp[i][j] = (i > 0 && j > 0) ? dp[i-1][j-1] + 1 : 1;
	dp数据如下：	
		1, 0, 0, 0, 0
		0, 2, 0, 0, 0
		0, 0, 0, 0, 0
		0, 0, 0, 1, 0
		0, 0, 0, 0, 2

	再优化：处理i和j的边界问题，二维表dp设置为dp[a.length+1][b.length+1]
	核心代码：dp[i+1][j+1] = dp[i][j] + 1;
	dp数据如下：
		0, 0, 0, 0, 0, 0
		0, 1, 0, 0, 0, 0
		0, 0, 2, 0, 0, 0
		0, 0, 0, 0, 0, 0
		0, 0, 0, 0, 1, 0
		0, 0, 0, 0, 0, 2

***********************************************
最长相同子序列问题：
	描述：给定两个字符串，求解这两个字符串的最长公共子序列
	实现：类似“最长相同子串”
	状态方程：dp[i][j] = (Xi==Yj且i,y>0) ? (dp[i-1][j-1] + 1) : (max{dp[i][j-1], dp[i-1][j]});
实例：
	字符串1=ABCBDAB，字符串2=BDCABA，它们最长公共子序列长度为4，最长公共子序列是BCBA
	dp数据如下：
		   Yj B  D  C  A  B  A
		Xi 0, 0, 0, 0, 0, 0, 0
		A> 0, 0, 0, 0, 1, 1, 1
		B> 0, 1, 1, 1, 1, 2, 2
		C> 0, 1, 1, 2, 2, 2, 2
		B> 0, 1, 1, 2, 2, 3, 3
		D> 0, 1, 2, 2, 2, 3, 3
		A> 0, 1, 2, 2, 3, 3, 4
		B> 0, 1, 2, 2, 3, 4, 4
	源代码：（处理i，j边界问题，dp长度+1）
		public int LCS(String a, String b) {
			char[] aArr = a.toCharArray();
			char[] bArr = b.toCharArray();
			int len1 = aArr.length, len2 = bArr.length;
			int[][] dp = new int[len1+1][len2+1];
			for (int i = 0; i < len1; i++) {
				for (int j = 0; j < len2; j++) {
					if (aArr[i] == bArr[j]) {
						dp[i+1][j+1] = dp[i][j] + 1;
					} else {
						dp[i+1][j+1] = Math.max(dp[i+1][j], dp[i][j+1]);
					}
				}
			}
			return dp[len1][len2];
		}


***********************************************
最长上升子序列(LIS)问题：
	描述：给定长度为n的序列a，从a中抽取出一个子序列，这个子序列需要单调递增，求最长的上升子序列的长度。
	如：1,5,3,4,6,9,7,8的LIS为1,3,4,6,7,8，长度为6
	设计：设Ax的LIS长度为f(x)。对于每一个比x小的p，若Ax > Ap，那么f(x) = f(p)+1。
	核心代码：
	for (int x = 0; x <= n; x++) {
		for (int p =0; p < x; p++) {
			if (a[x] > a[p]) f[x] = max(f[x], f[p] + 1);
		}
	}

***********************************************
最大连续子序列：
	描述：找出数组中和最大的连续子序列。如{5,-3,4,2}的最大子序列是{5,-3,4,2}，它的和是8，达到最大。{5,-6,4,2}最大子序列是{4,2}，和为6，达到最大。
	实现：只要前i项的和还没有小于0，那么子序列就一直向后扩展，否则丢弃之前的子序列，开始新的子序列。
	源代码：
		public int maxSubSum(int[] arr) {
			int len = arr.length, max;
			int[] dp = new int[len];
			max = dp[0] = arr[0];
			for (int i = 1; i < len; i++) {
				dp[i] = dp[i-1] > 0 ? dp[i-1] + arr[i] : arr[i];
				max = dp[i] > max ? dp[i] : max;
			}
			return max;
		}


***********************************************
乘积最大子序列问题：
	描述：给定一个数组nums，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）
	示例1：输入[2,3,-2,4]，输出6。子数组[2,3]有最大乘积6
	示例2：输入[-2,0,-1]，输出0。结果不能为2，因为[-2,-1]不是子数组。

	思路：
		遍历数组时计算当前最大值。令imax为当前最大值，则当前最大值为imax=max{imax*nums[i], nums[i]};
		由于存在负数，那么会导致最大的变最小，最小的变最大的。因此还需要维护当前最小值imin，imin=min{imin*nums[i], nums[i]};
		当负数出现时则imax和imin交换进行下一步计算。
	源代码：
		public int maxProduct(int[] nums) {
			int max = Integer.MIN_VALUE, imax = 1, imin = 1;
			for (int i = 0, len = nums.length; i < len; i++) {
				if (nums[i] < 0) {
					int tmp = imax;
					imax = imin;
					imin = tmp;
				}
				imax = Math.max(imax * nums[i], nums[i]);
				imin = Math.min(imin * nums[i], nums[i]);

				max = Math.max(max, imax);
			}
			return max;
		}


***********************************************
最长回文子串：
	描述：给定一个字符串 s，找到 s 中最长的回文子串。
	举例：""->"";"a"->"a";"ac"->"a";"babad"->"bab";"cbbd"->"bb"

	思路1：暴力匹配
		两层循环i,j，j>i。校验从i到j的子字符串是否为回文子串，若是则判断是否为最大回文子串。
		源代码：时间复杂度O(n^3)
		public String longestPalindrome(String s) { // 最长回文子串
			if (s.length() < 2) return s;
			char[] arr = s.toCharArray();
			int maxLen = -1, index = -1;
			for (int i = 0, len = arr.length; i < len; i++) {
				for (int j = i; j < len; j++) {
					if (valid(arr, i, j)) {
						if (maxLen < (j - i + 1)) {
							maxLen = j - i + 1;
							index = i;
						}
					}
				}
			}
			return s.substring(index, index+maxLen); 
		}
		private boolean valid(char[] arr, int i, int j) {
			while (i < j) {
				if (arr[i++] != arr[j--]) return false;
			}
			return true;
		}

	思路2：动态规划
		假设i，j代表从i~j的子字符串，若s[i]==s[j]，且字符串[i+1][j-1]也回文子串，则字符串[i][j]也是子字符串。
		思考：如何遍历？[i][j]的结果取决于[i+1][j-1]，由于j-1在j的前面，可以先遍历j再遍历i。
	源代码：时间复杂度O(n^2)
		public String longestPalindrome(String s) {
			int len = s.length();
			if (len < 2) return s;

			boolean[][] dp = new boolean[len][len];
			int maxLen = 1, start = 0;
			for (int j = 1; j < len; j++) {
				for (int i = 0; i < j; i++) {
					if (s.charAt(i) == s.charAt(j)) {
						if (j - i < 3) { // 处理"a","aa","aaa","aba"情况
							dp[i][j] = true;
						} else {
							dp[i][j] = dp[i + 1][j - 1];
						}
					} else {
						dp[i][j] = false;
					}
					if (dp[i][j]) {
						int curLen = j - i + 1;
						if (curLen > maxLen) {
							maxLen = curLen;
							start = i;
						}
					}
				}
			}
			return s.substring(start, start + maxLen);
		}







