树的前中后序遍历：
树的查找性能取决于树的高度，让树尽可能平衡是为了降低树的高度。

B树：
	B树是一种多路搜索树，它的每个节点都可以拥有多于两个孩子的节点。
	M路的B树最多拥有M个孩子节点，设计成多路是为了降低树的高度。
	B树一般用于文件系统的索引，文件系统和数据库的索引都是存在硬盘上的。B树的多路存储是为了每次加载B树的一个节点，然后一步步往下找。

红黑树：
	红黑树是平衡树的一种，它复杂的定义和规则都是为了保证树的平衡性。

	每个节点只有一个数，那么对于树的高度就会比B树高（B树一般每个节点存储多个数），每次读入一个节点都会进行一次IO，所以红黑树由于树高度太高而进行了太多的磁盘IO（磁盘IO的次数和树的高度有关）。

	在内存中红黑树比B树效率更高，但涉及磁盘操作时B树更优。

B+树：
	B+树是在B树的基础上进行改造，它的数据都在叶子节点上，同时叶子节点之间还加了指针形成了链表。

	select查询如果多条时，B树需要做局部的中序遍历，可能要跨层访问。而B+树由于所有数据都在叶子节点上，不用跨层，同时由于有链表结构，只需要找到首尾，通过链表就能把所有数据取出来。
	实例：select * from t where id <= 7 and id >= 19
		1）使用B树，此时遍历整个B树很多次，找到那些id符合条件的所有节点，然后再找到你所需要的信息。
		2）使用B+树，只需要从根节点找到起始位置（id=7）,然后顺着链表一直遍历，直到终止位置（id=19）。

	查找的数字都是索引key，而n你所要查找的值也就是你要select的东西，根据不同的存储引擎存储的位置也会不一样，MyISAM是在叶子节点存储一个指针，指向你所要查找的数据，而InnoDB是直接存储在叶子节点的，即索引和你要查的数据在一块。

hash和B+树比较？
	若只选一个数据，那确实hash更快；
	若数据库中选择多条时，由于B+树索引有序，并且又有链表相连，它的查询效率比hash就快很多了。
	而且数据库中的索引一般是在磁盘上，数据量大的情况可能无法一次装入内存，B+树的设计可以允许数据分批加载，同时树的高度较低，提高查找效率。
