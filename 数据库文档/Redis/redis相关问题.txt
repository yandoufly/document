

## 查看内存使用情况(info)
	[root@localhost bin]# redis-cli
	127.0.0.1:6379> info

	# Clients
	connected_clients:1 #查看客户端连接数
	client_recent_max_input_buffer:2
	client_recent_max_output_buffer:0
	blocked_clients:0

	# Memory
	used_memory:832784 # Redis分配的内存总量 
	used_memory_human:813.27K 
	used_memory_rss:1896448 # Redis分配的内存总量(包括内存碎片) 
	used_memory_peak:832760  
	used_memory_peak_human:813.24K #Redis所用内存的高峰值




详情redis文档笔记：
链接：http://note.youdao.com/noteshare?id=69b1fd11c614d75cdcef2bde3ac9fbbc


Redis的全称是什么？
	Remote Dictionary Server，翻译为远程字典服务

非关系型数据库的优势，解决什么问题？
	不用关心各种约束问题。

redis操作怎么保证原子性的？
	答：redis单线程


问：Redis为什么能这么快？
	1、redis基于内存，内存的读写速度非常快，省去了读取磁盘IO时间。
	2、redis是单线程，省去了很多上下文切换和锁的竞争问题。
	3、redis采用了多路复用技术，为非阻塞IO。
	4、有专门设计的RESP协议。

问：为什么Redis需要把所有数据放到内存中？
	Redis为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以redis具有快速和数据持久化的特征。如果不将数据放在内存中，磁盘IO速度为严重影响redis的性能。在内存越来越便宜的今天，redis将会越来越受欢迎。
	如果设置了最大使用的内存，则数据已有记录数达到内存限值后不能继续插入新值。

问：基于内存为什么会快？
	内存与CPU直接交换数据，所以内存越大，运行速度越快。
	计算机处理数据的基本原理：硬盘数据<-->内存<-->CPU

问：CPU、内存、磁盘关系？
	CPU(Central Processing Unit)：中央处理器，作用是处理指令、执行操作、控制时间和处理数据。
	内存和磁盘都是存储器，受CPU指挥。
	计算机中所有的运算都由cpu完成，寄存器只是用于存储数据，不参与运算。
	CPU的工作流程：
		1、需要从寄存器中取出数据；
		2、进行运算，要不停地用存储器读写；
		3、计算出结果再返回到存储器里。
	说明：
		若磁盘够快时，电脑不需要内存。但磁盘太慢了，所以磁盘来担任1和3的工作，由内存来分担2的工作。
		内存的速度很快，在电脑运行过程中，CPU通常只和内存交换数据，但内存在断电后数据会全部丢失，因此电脑使用磁盘来作为主要存储器。
		I/O接口：是输入/输出的接口。磁盘就是通过I/O接口，把数据送到内存中供CPU处理的。


redis为什么采用单线程？
	1.官方答案：reids基于内存操作，CPU不是redis的瓶颈，redis的瓶颈最有可能是机器内存的大小或网络带宽。
	2.性能指标：关于redis的性能，官网上的介绍，普通笔记本轻松处理每秒几十万的请求。
	3.详细原因：
		-1）相比多线程代码更清晰，处理逻辑更简单；
		-2）不需考虑各种锁问题，不存在加锁释放锁操作，不存在死锁问题；
			redis有list、hash等复杂结构，这些结构可能进行很细粒度操作，因此可能需要考虑各种加锁控制和死锁问题。
		-3）CPU消耗。
			采用单线程，避免了不必要的上下文切换和竞争关系，也不存在多进程或多线程导致切换而消耗CPU。
	
	问：单进程单线程弊端
		无法发挥多核CPU性能。优化：可采用单线程多进程集群方案
	问：redis是单线程的，如何提高多核cpu的利用率？
		在同一台服务器部署多个redis实例。

	问：若让CPU成为redis瓶颈，或不想让服务器其它CPU闲置，那怎么设置？
		可考虑多起几个Redis进程，Redis是key-value数据库，不是关系型数据库，数据之间没有约束。只要客户端分清key放在哪个Redis进程即可。


1.1	缓存技术对比
1.1.1	EhCached介绍
Ehcache直接在jvm虚拟机中运行，速度快，效率高，适用于单体应用；Ehcache不适合分布式应用，其缓存数据无法在其它应用共享。
Ehcache常用于单体项目中保存shiro登录用户的权限数据。
1.1.2	memcached介绍
Memcached只有String这一种类型类型。
Memcached可以利用多核优势，单实例吞吐量极高，可以达到几十万QPS，适用于最大程度扛量。
1.1.3	memcached与redis比较
数据类型：redis支持多种数据类型，memcached仅支持简单key/value数据类型。
数据持久化：redis支持rdb和aof两种。memcached不支持数据持久化
模型：redis使用单线程，而memcached使用多线程。redis使用单核，而memcached可利用多核。在处理小的文件时redis会比memcached有更高的效率，但是在100K以上时，memcached的效率就会更高一些。
redis只支持单线程，其性能受限于CPU性能，即取决于数据结构、数据大小、以及服务器硬件性能，其在日常环节中的QPS高峰约为1-2w。而memcached具有多核优势，其单实例的吞吐量极高，性能主要取决于存储的key及value的字节大小以及服务器硬件性能，其在日常环节中的QPS高峰约为4-6w。（读写性能qps）

总结：一昧的使用redis来进行数据缓存系统，并不是最佳的选择，如果项目根本就不需要复杂的数据结构呢？如果项目的数据只有一小部分使用了缓存，根本不需要使用持久化和备份呢？如果项目不需要在服务器之间进行数据同步呢？在诸如此类情况下，使用redis反而是增加项目成本。

redis和memcached有什么区别？
	数据类型：redis支持多种数据类型，memcached仅支持简单key/value数据类型。
	数据持久化：redis支持rdb和aof两种。memcached不支持数据持久化
	运行模型：redis使用单线程，而memcached使用多线程。redis使用单核，而memcached可利用多核。在处理小的文件时redis会比memcached有更高的效率，但是在100K以上时，memcached的效率就会更高一些。
	集群：都可以集群，不过在100k以上的数据中，memcached性能要高于redis



不重启redis时修改配置实时生效？
	针对运行实例，可通过“config set”命令进行配置修改，而无需执行任何形式的重启。
	从Redis2.2开始，可以从AOF切换到RDB的快照持久性或其他方式而不需要重启Redis。
	检索“config get *”命令获取更多配置信息。


停止redis服务：
	正确停止redis服务 应该基于连接命令 加再上 shutdown -> 否则数据持久化会出现问题
	shutdowm关闭服务时，如果没有配置AOF，则会使用bgsave持久化数据

问：redis的key设置？
	由于业务复杂，key一般设置比较复杂
	通常为“系统标识：模块名称：方法名称：参数”

问：redis的key如何寻址？
	类似于HashMap的寻址方式。

问：一个Redis实例最多能存放多少的keys？
	理论上Redis可以处理多达2^32的keys。
	换句话说，Redis的存储极限是系统中的可用内存值。

问：如何从10W个key中找到某个固定前缀开头的key？
	方式一：使用keys指令，匹配固定前缀
		redis是单线程的，keys指令会导致线程阻塞，线上服务会停顿，直到指令执行完毕后恢复
	方式二：使用scan指令
		scan指令可以无阻塞的提取指定模式的key列表，但会有一定的重复，需在客户端去重，其整体所花费的时间比key指令长。

一个字符串类型的值能存储最大容量是多少？
	512M


redis持久化的几种方式，优缺点是什么，怎么实现的，区别是什么？
	两种：rdb(默认)、aof
	区别：rdb存数据，aof存写操作命令
	其他问题：
		aof和rdb的优缺点，你在项目中使用的哪一个


redis的AOF如何缩减自身文件大小？
	描述：随着aof文件越来越大，里面会有大部分是重复命令或可以合并的命令(100次incr=set key 100)
	解决：执行bgrewriteaof命令对redis的AOF进行重写。
	重写的好处：减少aof日志尺寸，减少内存占用，加快数据库恢复时间
	从redis2.4开始，aof重写由redis自行触发，bgrewriteaof仅仅用于手动触发重写操作。
	旧的aof文件在bgrewriteaof成功之前不会被修改，因此bgrewriteaof操作失败不会造成任何数据丢失。


redis数据备份与恢复：
	save命令用于创建当前数据库的备份
	若需要恢复数据，只需将备份文件(dump.rdb)移动到redis安装目录并启动服务即可。
	获取redis目录可以使用config命令。

save和bgsave区别？
	save：由于redis单线程，save会造成阻塞，在rdb文件创建完成之前不处理任何请求。
	bgsave：会fork出子进程，用来创建rdb文件工作，父进程正常执行业务操作。
		在执行bgsave期间，主线程会拒绝save和bgsave命令；bgrewriteaof命令会延迟到bgsave命令结束之后执行。


问：Redis的内存用完了会发生什么？
	如果达到设置的上限，Redis的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可以将Redis当缓存来使用配置淘汰机制，当Redis达到内存上限时会冲刷掉旧的内容。
redis过期策略及内存淘汰机制？redis的缓存失效策略？
	问：redis内存淘汰机制（MySQL里有2000w数据，Redis中只存20w的数据，如何保证Redis中的数据都是热点数据？）
过期策略：
	redis采用定期删除+惰性删除策略。
	定期删除：指redis默认每隔10ms就随机抽取一些设置了过期时间的key，检查其是否过期，若过期就删除。不检查全部是为了避免redis卡死，部分未删除则根据惰性删除策略。
	惰性删除：在你获取某个key时，redis会检查其是否过期，若过期则此时删除，并不会返回任何东西。
	注：这样该删除的key可能还未删除，而导致redis内存越来越大，那么就会使用内存淘汰策略机制。
内存淘汰机制：
	# maxmemory-policy volatile-lru //在redis.conf配置
	--参数说明：
	volatile-lru 	//在已设置过期时间的数据集(server.db[i].expires)中，移除最近最少使用的key
	volatile-ttl 	//在已设置过期时间的数据集(server.db[i].expires)中，移除将要过期的key
	volatile-random //在已设置过期时间的数据集(server.db[i].expires)中，随机移除一个key

	allkeys-lru 	//在数据集(server.db[i].dict)中，移除最近最少使用的key
	allkeys-random 	//在数据集(server.db[i].dict)中，随机移除一个key

	no-eviction		//内存不足时，写入报错
LRU算法最为精典的实现，就是HashMap+Double LinkedList，时间复杂度为O(1)


问：Redis回收使用的是什么算法？
	LRU算法
问：Redis回收进程如何工作的？
	一个客户端运行了新的命令，添加了新的数据。Redi检查内存使用情况，如果大于maxmemory的限制，则根据设定好的策略进行回收。


redis分区：
	分区是分割数据到多个Redis实例的处理过程，因此每个实例只保存key的一个子集。
问：为什么要分区？
	分区可以让Redis管理更大的内存，Redis将可以使用所有机器的内存。
	如果没有分区，你最多只能使用一台机器的内存。分区使Redis的计算能力通过简单地增加计算机得到成倍提升,Redis的网络带宽也会随着计算机和网卡的增加而成倍增长。
问：分区实现方案？
	客户端分区：即在客户端就已经决定数据会被存储到哪个redis节点或者从哪个redis节点读取。且大多数客户端已经实现了客户端分区。
	代理分区：客户端将请求发送给代理，然后代理决定去哪个节点写数据或者读数据。代理根据分区规则决定请求哪些Redis实例，然后根据Redis的响应结果返回给客户端。redis和memcached的一种代理实现就是Twemproxy
	查询路由：客户端随机地请求任意一个redis实例，然后由Redis将请求转发给正确的Redis节点。Redis Cluster实现了一种混合形式的查询路由，但并不是直接将请求从一个redis节点转发到另一个redis节点，而是在客户端的帮助下直接redirected到正确的redis节点。
问：redis分区有什么缺点？
	1、多个key操作通常不会被支持。例如两个集合求交集，因为它们被存储到不同redis实例。
	2、分区时数据处理会非常复杂。例如为了备份你必须从不同的reids实例和主机同时收集rdb/aof文件。
	3、分区时动态扩容或缩容可能非常复杂。
		Redis集群在运行时增加或者删除Redis节点，能做到最大程度对用户透明地数据再平衡，但其他一些客户端分区或者代理分区方法则不支持这种特性。
		然而，有一种预分片的技术也可以较好的解决这个问题。


Redis支持的Java客户端都有哪些？官方推荐用哪个？
	Redisson、Jedis、lettuce等等，官方推荐使用Redisson。
Redis和Redisson有什么关系？
	Redisson是一个高级的分布式协调Redis客服端。
Jedis与Redisson对比有什么优缺点？
	Jedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持；
	Redisson实现了分布式和可扩展的Java数据结构，和Jedis相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等Redis特性。
	Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。


redis 常见的性能问题有哪些？该如何解决？
Redis集群宕机如何处理，怎么样进行数据的迁移？
