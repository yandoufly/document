
SQL语言：数据定义、数据操作、数据控制
1.数据定义语言(Data Definition language, DDL):create table/view/function/produce, alter table, drop table, create/drop index等
	create table student(
		id number primary key,
		name varchar(20) not null
	); --创建表
	create or replace view viewName as (select ...) --创建视图
	alter table t_order add constraint fk_customer_id foreign key(customer_id) references t_customer(id) on delete cascade; --添加外键，级联删除
	alter table tableName add/modify/drop colName dataType; --添加/修改/删除列
	create (unique) index indexName on tableName(colName); --创建(唯一)索引
	drop index indexName on tableName; --删除索引
2.数据库操作语言(Data Manipulation language, DML):select, insert, delete, update
	insert into tableName(col1, col2) values (val1, val2); --插入数据
	update tableName set col='val' where... --更新数据
	delete from tableName where... --删除数据
3.数据控制语言(Data Control language, DCL):grant, revoke, commit, rollback
	grant (select,delete,…) on (用户) TO (用户) [WITH GRANT OPTION]; --授权
	grant all privileges on zhang.person to chenmh; --授予用户chenmh用户zhang下person表的所有权限
	revoke (权限表) on (用户) from (用户) [WITH GRANT OPTION]; --撤权

创建表/复制表
	create table test2 like test1;
	create table t1 as select * from t2 where 1=0; --只复制表结构
	create table t1 as select * from t2 where 1=1; --复制表结构及数据
快速插入数据/复制数据：
	select c1, c2 into t2 from t1;
	insert into t2 select c1, c2 from t1;

select * from t1 order by name+0; --按aa1,aa2,aa10,aa11的顺序来显示排序


drop、delete和truncate的区别：
delete :删除数据
	删除数据: delete from tableName where... 
drop :删除数据库/表/字段
	删除数据库: drop database 数据库名称
	删除数据表: drop table tableName1,tableName2,...
	删除列: alter table tableName drop column colName
truncate :删除数据表中的数据（仅数据表中的数据，不删除表）
	删除数据: truncate table tableName
	truncate table语句是一种快速、无日志记录的方法。
delete与truncate相比：
	delete语句每次删除一行，并在事务日志中为所删除的每行记录一项。
	truncate table通过释放用于存储表数据的数据页来删除数据，并且在事务日志中只记录页释放。
	使用的锁通常较少。
	当使用行锁执行delete语句时，将锁定表中各行以便删除。truncate table始终锁定表和页，而不是锁定各行。
	使用truncate table语句清空的表的定义与其索引和其他关联对象一起保留在数据库中。
remove :删除数据库文件
	alter database Mydatabase1 remove file Mydatabase1_log;

Oracle 删除重复数据（最高效）
	delete from t1 where t1.rowid > (select min(t2.rowid) from t2 where t2.name = t1.name);
用truncate代替delete：
	delete删除表中数据时，通常情况下回滚段(rollback segments)用来存放开头被恢复的信息。如果你没有COMMIT事务,ORACLE会将数据恢复到删除之前的状态(准确地说是恢复到执行删除命令之前的状况)。
	当运用TRUNCATE时, 回滚段不再存放任何可被恢复的信息.当命令运行后,数据不能被恢复.因此很少的资源被调用,执行时间也会很短.


5种约束：
1.主键约束(primary key constraint)
	--主键约束(会自动创建唯一索引)
	语法：alter table tableName add constraint pk_name primary key (colName);
2.唯一性约束(unique constraint)
	--唯一约束(会自动创建唯一索引)
	语法：alter table tableName add constraint uq_name unique (colName);
3.外键约束(foreign key constraint)
	alter table tableName add constraint fk_name foreign key(user_id) references t_user(id);
4.检查约束(check constraint)
	alter table tableName add constraint ck_age check (age between 18 and 30); //年龄18~30之间
	alter table tableName add constraint ck_sex check (sex='男' or sex='女'); //性别只能是男女
5.默认约束(default constraint)
	alter table tableName add colName dataType default 0; //添加默认为0的字段


列举几种表连接方式：
	answer：等连接（内连接）、非等连接、自连接、外连接（左、右、全）
内连接和外连接描述：
	1）内连接(inner join)是保证两个表中所有的行都要满足连接条件，而外连接则不然。
	2）在外连接（左、右、全）中，某些不满条件的列也会显示出来，也就是说，只限制其中一个表的行，而不限制另一个表的行。
	3）左连接(left join)：返回包括左表中的所有记录，和右表中连接字段相等的部分记录
	4）右连接(right join)：返回包括右表中的所有记录，和左表中联结字段相等的部分记录
	5）全连接(full join)：返回完整外部联接返回左表和右表中的所有行
外连接：
1.完全外连接语法：
	select A.c1, B.c2 from A, B where A.id = B.id(+)
	union
	select A.c1, B.c2 from A, B where A.id(+) = B.id
2.左外连接：包含左边表的全部行（不管右边的表中是否存在与它们匹配的行）以及右边表中全部匹配的行
	select A.c1, B.c2 from A left join B on A.c3 = B.c3;
3.右外连接：包含右边表的全部行（不管左边的表中是否存在与它们匹配的行）以及左边表中全部匹配的行
	select A.c1, B.c2 from A right join B on A.c3 = B.c3;
4.全外连接：包含左、右两个表的全部行，不管在另一边的表中是否存在与它们匹配的行
	select A.c1,B.c2 from A full join B on A.c3 = B.c3;
5.theta连接：使用等值以外的条件来匹配左、右两个表中的行
	select A.c1,B.c2 from A join B on A.c3 != B.c3;
6.交叉连接：生成笛卡尔积——它不使用任何匹配或者选取条件，而是直接将一个数据源中的每个行与另一个数据源的每个行一一匹配
	select A.c1,B.c2 from A,B;

左外连接(左表不变，右表+null)：where t1.c3=t2.c3(+) 或者 left outer join t2 on t1.c3=t2.c3
右外连接(右表不变，左表+null)：where t1.c3(+)=t2.c3 或者 right outer join t2 on t1.c3=t2.c3


MySQL 连接云数据库：
数据库：extranet4example.mysql.rds.aliyuncs.com
用户名：Username
密码：Password
> mysql -h extranet4example.mysql.rds.aliyuncs.com -p 3306 -u Username -pPassword

自定义sql编写：
	and p.create_time >= to_date($createTime,'YYYY-MM-DD') 		--日期(将$替换成:)
	and p.create_time > (to_char($createTime, 'yyyy-mm-dd') -1) --优化

count()函数：
	count(*)=count(1)	--返回表中记录总数
	count(expr)			--返回expr不为空的记录总数，null不计算入内
	count(distinct 列名)	--得到列名不重复的记录总数


Oracle 查看版本：
	select * from v$version;

Oracle nvl()函数：
	nvl(str1, str2):若str1为空，则返回str2，否则返回str1
	nvl2(E1, E2, E3):若E1为空则返回E3，否则返回E2

Oracle case()函数：
	实例1：select id, case when nvl(t.aid_time, 0) = 0 then '01' else '02' end as item_code from ehr_person t;
	实例2：
		(case when mod(rownum,10)=0 then 1.4 when mod(rownum,5)=0 then 0.6 else 1 end) as 测试

Oracle decode()函数:
	语法：decode(条件, 值1, 返回值1, 值2, 返回值2, ...)
	--含义：
	if 条件=值1 then
		return (返回值1)
	elsif 条件=值2 then
		return(返回值2)
	elsif 条件=值n then
		return(返回值n)
	else
		return(缺省值)
	end if;
	例如：查询某班男生和女生的数量分别是
		--以前
		select count(*) from 表 where 性别＝男;
		select count(*) from 表 where 性别＝女;
		--现在
		select sum(decode(性别, 男, 1, 0)), sum(decode(性别, 女, 1, 0)) from 表;

Oracle substr()函数：
	用于截取字符串。语法：substr(str, start, length)
	测试：
		substr('1234567', 2)	--从2开始截取
		substr('1234567', 2, 3)	--从2开始截取3位数
		substr('1234567', -2)	--去除最后2位
		substr(t.construct_type, 0, 2) --截取前2位数
		substr(t.person_mark, 0, length(t.person_mark) - 1) --去除最后一位数

Oracle trim()函数：
sql拼接字符串后去掉最后一位字符：
	--用途：拼接的字符串"AA、BB、CC、DD、"后的想去掉最后的字符"、"
	详情：http://blog.csdn.net/sinat_33819452/article/details/52908782
	trim(trailing 'O' from 'ODWEYEO') //ODWEYE
	trim(leading 'O' from 'ODWEYEO')  //DWEYEO
	--实例：
	select 
		trim(trailing '、' from 
		  decode(p.child, 1, '0-6岁儿童、', '') ||
		  decode(p.pregnancy, 1, '孕产妇、', '') ||
		  decode(p.old_man, 1, '老年人、', '') ||
		  decode(p.hypertensive, 1, '高血压患者、', '') ||
		  decode(p.diabetic, 1, '糖尿病患者、', '') ||
		  decode(p.psychopath, 1, '严重精神障碍患者、', '') ||
		  decode(p.tuberculosis, 1, '结核病患者、', '') ||
		  decode(p.disability, 1, '残疾人、', '') ||
		  decode(p.special_family, 1, '特殊家庭、', '') ||
		  decode(p.needy_family, 1, '贫困人口、', '') ||
		  decode(p.veteran, 1, '退伍军人、', '')
		) as person_mark
	from ehr_person p;
Oracle中trim、ltrim、rtrim函数：
	trim(str)	--去除字符的前后空格
	ltrim(str)	--去除字符左边的空格
	rtrim(str)	--去除字符右边的空格
	trim(leading|trailing|both ch from str) --字符串str中去除左边|右边|左右边指定的字符ch。
	注：trim只能去除单个字符，而ltrim和rtrim能去除多个字符
	

	作用1：去除两端空格、去除左边空格、去除右边空格
		测试：select ' aaa ', trim(' aaa '), ltrim(' aaa '), rtrim(' aaa ') from dual;
	作用2：去除指定字符。trim只能去除单个字符，而ltrim、rtrim可以去除多个字符。
	格式：
		trim(leading|trailing|both ch from str) --字符串str中去除左边|右边|左右边指定的字符ch
		ltrim(str1, str2)
		rtrim(str1, str2)
	测试：select trim(both '1' from '1123411') from dual;
	


replace(str, ',', '|')	--替换字符串

sys_guid()	--获取uuid/guid


sysdate 	--获取当前时间(格式如：2018/10/17 11:13:07)
sysdate+10	--加天数，负数为减天数
(sysdate - 1/24/60*10)	--前10分钟
add_months(sysdate, month);	--添加月份，负数为减月份
last_day(sysdate)	--日期最后一天
months_between(to_date('20190921', 'yyyymmdd'), to_date('20190722', 'yyyymmdd'))	--存在小数(1.96774193548387)
next_day(to_date('20191005', 'yyyymmdd'), '星期日')	--下个星期日的日期
to_char(sysdate, 'yyyy') --日期转字符串。如to_char(sysdate, 'yyyy-mm-dd')
to_date('2017-12-30', 'yyyy-mm-dd') --字符串转日期。如to_date('20191021', 'yyyymmdd')
to_timestamp('2018-10-16 15:30:46', 'yyyy-mm-dd hh24:mi:ss') --字符串转时间戳
时间戳转date
	to_date(start_time, 'yyyy-mm-dd hh24:mi:ss') //方式一
	cast(start_time as date) //方式二

得到某月份的第一天和最后一天：
	to_date('20188', 'yyyymm')	--第一天
	last_day(to_date('20188', 'yyyymm')) 	--最后一天


Oracle cast()函数：
	用于数据类型转换。格式：cast(colName as 数据类型)
	测试：
		cast(123 as varchar2(20)) --number转varchar2
		cast('123.6' as int) --字符串转整型(cast具备四舍五入操作)
		cast('123.447654' as decimal(5,2)) --截断小数。decimal(5,2)表示值总位数为5，精确到小数点后2位
		cast(start_time as date) --将timestamp转为date
Oracle round()函数：
	四舍五入的方法，指定的小数位元数进行四舍五入运算的结果。
Oracle mod(m, n)函数：
	返回m除以n的余数，如果n是0，返回m

Oracle add_months()函数
	add_months(times, months) --计算times在加上months月份后的时间，months可以为负数
	add_months(sysdate,-6) //半年前的时间

Oracle extract()函数：
	截取时间，返回number类型。
	语法：extract(year|month|day|hour|minute|second from sysdate)
	--例如：
	extract(year from p.birthday) //获取年份
	extract(month from sysdate) //获取月份
	extract(day from t.date2 - t.date1) //返回两个时间相隔天数(不能求相隔多少年/月)

满足65周岁：
	and (to_number($year) - extract(year from p.BIRTHDAY) > 64); --所选年份满65周岁
	months_between(to_date('2018-12-12', 'yyyy-mm-dd') + 1, to_date('1953-12-12', 'yyyy-mm-dd')) > 780; --当天满65周岁，精确到天

to_number()	--字符串转数字。如：to_number('123')


字符串函数：
	initcap	--首字母大写，其他全部小写。如initcap('hElLOwoRLD') 为 Helloworld
	instr	--字符串下标，从1开始计数。如instr('Helloworld','o') 为 5
	length	--字符串长度。如length('HelloWorld') 为 10
	replace	--替换。如replace('HelloWorld','rld','od') 为 HelloWood
	substr	--字符串截取。如substr('HelloWorld',3,4) 为 lloW
	trim	--去除空格。如trim('    a   ') 为 a
	lower	--转小写。如lower('HeLloWorLD') 为 helloworld
	upper	--转大写。如upper('HeLloWorLD') 为 HELLOWORLD


数值函数：
	abs		--绝对值。如abs(-18)为18
	ceil	--进1法。如ceil(10.1)和ceil(10.9)都为11
	floor	--去除小数。如：floor(10.1)和floor(10.9)都为10
	mod		--开平方。如：mod(17 ,3)为2
	sqrt	--开平方。如：sqrt(25)为5
	power	--幂次方。如：power(3,3)为27
	trunc	--截取数值
	round	--四舍五入
		decimals为正数时表示精确的小数位数，负数时表示从小数点开始左边的位数，相应整数数字用0填充，小数被去掉。
		测试：
		round(1234.5678,3)	--1234.568
		round(1234.5678,-2)	--1200


rownum --表示行号，实际上此是一个列，但是这个列是一个伪列。
rowid --表示每一列对应的十六进制物理地址值


Oracle 分页：
int page = 2; //页数
int rows = 5; //显示行数
List<User> list = userService.select(page*rows+1, (page-1)*rows); //对应着select(11, 5)，即5<rownum<11，查询第二页数据
1.根据rowid查询(优)：
	# select rowid rid, cid from tableName [where条件] [orderBy条件]; //步骤一：获取数据物理地址rowid
	# select rownum rn, rid from (步骤一SQL) where rownum < 11; //步骤二：获取最大页数
	# select rid from (步骤二SQL) where rn > 5; //步骤三：获取最小页数
	# select * from tableName where rowid in (步骤三SQL); //步骤四：根据物理地址获取具体数据
	select * from tableName where rowid in (
		select rowid from (
			select rownum rn, rid from (
				select rowid rid, cid from tableName [where条件] [orderBy条件] --步骤一
			) where rn < 11 --步骤二
		) rn > 5 --步骤三
	); --步骤四
2.根据rownum查询
	# select * from tableName [where条件] [orderBy条件]; //步骤一：获取全部符合条件的数据
	# select t.*, rownum rn from (步骤一SQL) t where rownum < 21; //步骤二：获取最大页数
	# select * from (步骤二SQL) where rn > 10; //步骤三：获取最小页数

MySQL大数据分页优化：
原始mysql> select * from t_user where uid=123 order by aid desc limit 44000,10;
优化mysql> select * from t_user a, (select aid from t_user where uid=123 order by aid desc limit 4400,10) b where a.aid=b.aid;



集合运算：
1.并集运算(union)
	select_clause1 union all select_clause2; --不去重
	select_clause1 union select_clause2; --去重
2.交集运算(intersect)
	select_clause1 intersect select_clause2;
3.差集(minus)
	select_clause1 minus select_clause2;

概念：
	union all是直接连接，将所有sql的数据合并，记录可能有重复；union是取得唯一值，记录没有重复。
	union描述：orderBy只能在最后一行使用，列名必须统一
	minus描述：返回只在一个表中出现的记录



Oracle 虚拟列(Virtual Column)：
	虚拟列是一个表达式，在运行时计算，不存储在数据库中，不能更新虚拟列的值。
	虚拟列的值由表达式的值填充，只有当通过动态地一个或一个列表达式被查询时,虚拟列的值才被计算
	虚拟列的数据并没有存储在数据文件中，而是oracle通过列数据的生成放到数据字典中。
	虚拟列的数值是通过真实列中的数据计算而来的。
	虚拟列可以用在where条件中！！
	列位置随意,不过要添加后面的列字段时，必须在后面列字段先添加后再改变原来的列数据！
	例如：虚拟列记录num1+num2+num4的添加顺序
		alter table AA_ATEST add num1 NUMBER(18,6);
		alter table AA_ATEST add num2 NUMBER(18,6);
		alter table AA_ATEST add cc as (NVL("NUM1",0)+NVL("NUM2",0));
		alter table AA_ATEST add num4 NUMBER(18,6);
		alter table AA_ATEST modify cc as (NVL("NUM1",0)+NVL("NUM2",0)+NVL("NUM4",0));
	创建带虚拟列的表：
		create table employee(
			id 			number,
			username 	varchar(50),
			monthly_sal number(10, 2),
			bonus 		number(10, 2),
			total_sal 	number(10, 2) generated always as (monthly_sal*12 + bonus) --虚拟列
		);


Oracle 临时表(两种)：
1.oracle中的with tableName as描述：
	with tableName as 相当于建个临时表(用于一个语句中某些中间结果放在临时表空间的SQL语句)
	语法：with tempName as (select ...)
2.全局临时表(Global Temporary Tables)
	--1）特点
	隔离性：数据只在会话或事务级别可见。不同用户可以使用同一临时表，但看到的是各自的数据。
	可创建索引、视图、触发器。索引仅在表数据为空时才可创建。
	语法：create global temporary table tableName(columns) [on commint preserve|delete rows]
	例如：create global temporary table temp_emp(eno number) on commit delete rows;
	--2）可分2种类型
	on commit delete rows --事务级别，默认
		表示临时表的数据仅在事务过程中有效。当事务提交(commit)或回滚(rollback)时，数据就会被清空(truncate)掉，但表结构和元数据还在。
		测试：
			create global temporary table bm_temp_base(code varchar(30), name varchar(50)) on commit delete rows;
			insert into bm_temp_base select a.code, a.name from bm_base a where a.type='BM_YES_NO';
			select * from bm_temp_base; //有数据
			commit;
			select * from bm_temp_base; //无数据
	on commit preserve rows --会话级别
		表示临时表的数据跨事务存在，不过当会话结束时，数据就会被清空(truncate)掉，但表结构和元数据还在。

