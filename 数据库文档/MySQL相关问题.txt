mysql三大引擎：
	--1）InnoDB：默认，磁盘表，支持事务、行级锁，采用B+Tree做索引
		优点：具有良好的ACID特性。适用于高并发，更新操作比较多的表。
		缺点：读写效率相对MyISAM比较差，占用的磁盘空间比较大
	--2）MyISAM：磁盘表，不支持事务，支持表级锁，采用B+Tree做索引
		优点：占用空间小，处理速度快（相对InnoDB来说）
		缺点：不支持事务的完整性和并发性
	--3）MEMORY(Heap)：内存表，不支持事务，表级锁，Hash索引，不支持Blob,Text大类型
		优点：速度要求快的，临时数据
		缺点：丢失以后，对项目整体没有或者负面影响不大的时候

InnoDB和MyISAM区别：
	事务：InnoDB支持事务，MyISAM不支持。InnoDB每一条SQL语言都默认封装成事务，自动提交。
	外键：InnoDB支持外键，而MyISAM不支持。对于一个包含InnoDB表转化为MyISAM会失败。
	锁级别：InnoDB支持表、行（默认）级锁，MyISAM支持表级锁。
	存储文件：
		InnoDB存储文件:from-表定义文件，ibd-数据文件
		MyISAM存储文件:from-表定义文件，myi-索引文件，myd-数据文件
	索引：
		InnoDB是聚集索引，B+Tree作索引结构。数据文件和索引绑定在一起，必须要有主键。
		MyISAM是非聚集索引，B+Tree作索引结构，索引文件和数据文件是分离，索引保存的是数据文件的指针。

MySQL主键索引和普通索引区别？
	InnoDB的主键索引的叶子节点就是数据文件，普通索引的叶子节点就是主键的值；通过主键索引效率很高，但普通索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此主键不应该过大，因为主键太大，其它索引也会很大。
	MyISAM的主键索引和普通索引的叶子节点都是数据文件的地址指针。主键索引和普通索引是独立的。

聚集索引和非聚集索引区别？
	聚簇索引：将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据；
	非聚簇索引：将数据与索引分开存储，索引结构的叶子节点是数据文件的地址指针。


一个m阶的B树(B-Tree)特点：
	1.每个节点最多有m-1个key；
	2.根节点至少有一个key，非根节点至少有Math.ceil(m/2)-1个key；
	3.叶子节点具有相同的深度，叶子节点的指针为空。
	4.节点中的数据索引从左到右递增排列

B+Tree特点(B-Tree的变种)：
	1.非叶子节点不存储data，只存储索引（冗余），可以放更多的索引；
	2.叶子节点包含所有索引字段；
	3.叶子节点构成有序链表，用于按key排序的次序遍历全部记录，以提高区间访问的性能。

红黑树、B树、B+树的区别？
	二叉树：左边的节点比根节点小，右边的比根节点大。这样可能回出现某个脚特别大。
		引入红黑树为了保证树的平衡。树的查找性能取决于树的高度，让树尽可能平衡就是为了降低树的高度。
	B树：是一种多路搜索树，它的每个节点可以拥有多于两个孩子节点，M路的B树最多能拥有M个孩子节点。
		为什么设计成多路呢？答：为了降低树的高度，路数越多，高度越低，查找的性能越高。
	B+树：在B树的基础上改造，它的数据都在叶子节点上，同时叶子节点之间还加了指针形成链表。
		这样设计的原因：select的返回结果可能有多条，B树查询需要做局部的中序遍历，可能要跨层访问，而B+树的所有数据都在叶子节点上，不用跨层，只需要找到首尾，通过链表就能把所有数据查询出来。
	B和B+树主要区别是：B+树的非叶子节点只存储索引，不存储实际的只，所有叶子节点使用链表连接，便于区间查找和遍历。
	用途：
		如果只选出一个数据的查询，hash查询效率更快，但如果查询多条数据，由于B+树索引有序，它的查询效率就比hash快很多了。


出现m阶（多路查找树）原因？
	多路查找树的数据结构，用在内存读取外存时可减少磁盘的IO次数。
	因为高阶情况下，树不是很高就可以标识很大的数据量了


什么是覆盖索引？
	描述：一个索引包含所有需要查询的字段，即只需扫描索引而无需回表。
	覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！ 
	在InnoDB存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。终还是要“回表”，也就是要通过主键再查找一次,这样就 会比较慢。
	覆盖索引必须要存储索引列的值，而哈希索引、空间索引和全文索引不存储索引列的值，所以mysql只能用B-tree索引做覆盖索引。


show clobal status like 'Innodb_page_size'; --mysql查询页大小


级联删除/更新关联表：
	alter table `t_user_detail` add constraint `fk_user_id` foreign key (`user_id`) references `t_user` (`id`) on delete cascade on update cascade;


MySQL应用之实现Oracle rank()排序：
	https://blog.csdn.net/u014427391/article/details/100898845

B+索引：
	B+树的高度一般是2-4层，也就是说查找某一键值对应的行记录只需要2-4次IO。
	B树相比B+树的一个主要区别就在于B树的分支节点上存储着数据，而B+树的分支节点只是叶子节点的索引而已。


数据库崩溃时事务的恢复机制？
	REDO日志和UNDO日志

varchar和char的使用场景？
	vharchar变长，char定长。

查询语句不同元素（where、join、limit、group by、having等等）执行先后顺序？
sql查询语句确定创建哪种类型的索引？如何优化查询？
数据库的大表查询优化？
MySQL慢查询解决？explain优化？
AUTO_INCREMENT原理（考察并发情况）?
MVCC机制有什么问题？怎么解决？
临时表？临时表的数据什么时候删除？
非关系型数据库和关系型数据库区别，优势比较？
数据库三范式，根据某个场景设计数据表？范式和反范式的区别以及彼此的优缺点？
什么是内连接、外连接、交叉连接、笛卡尔积等？
数据库的读写分离、主从复制，主从复制分析的7个问题？
MySQL慢查询怎么解决？如何使用explain优化sql查询和索引？
数据库崩溃时事务的恢复机制（REDO日志和UNDO日志）？
你们后端用什么数据库做持久化的？有没有用到分库分表，怎么做的？
数据库分页查询，如何分页，怎么实现？
MySQL常见的三种存储引擎（InnoDB、MyISAM、MEMORY）的区别？
sql查询语句确定创建哪种类型的索引？如何优化查询？聚集索引和非聚集索引区别？
索引的常见实现方式有哪些，有哪些区别?MySQL的存储引擎有哪些，有哪些区别？InnoDB使用的是什么方式实现索引，怎么实现的？说下聚簇索引和非聚簇索引的区别？什么是覆盖索引？
MySQL索引类别？为什么要用B+树？B+树和B-树的区别？B+Tree索引和Hash索引的区别？为什么选用自增量作为主键索引？介绍B树、B+树、红黑树？
组合索引和单个索引有什么区别？
MySQL事务的4大特性、4种隔离级别及解决的问题，MySQL默认是哪个级别？
	特性(ACID)：原子性、一致性、隔离性、持久性
	事务级别：串行化、读已提交(默认)、可重复读、读未提交
	mysql如何在RR隔离级别下避免幻读问题：间隙锁
	四种隔离级别，虚读和幻读什么意思发生在哪？
MySQL锁，行锁，表锁 ，什么时候发生锁，怎么锁，原理
数据库优化，最左原则啊，水平分表，垂直分表
MySQL都有什么锁，死锁判定原理和具体场景，死锁怎么解决？select时怎么加排它锁？


