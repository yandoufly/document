官方文档：
	https://developers.weixin.qq.com/miniprogram/dev/framework/
	https://developers.weixin.qq.com/miniprogram/dev/devtools/page.html

小程序代码构成：
1.小程序配置(app.json):
	--当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部tab等。
	详情：https://developers.weixin.qq.com/miniprogram/dev/framework/config.html
	例如：
	{
		"pages":[
			"pages/index/index",
			"pages/logs/logs"
		],
		"window":{
			"backgroundTextStyle":"light",
			"navigationBarBackgroundColor": "#fff",
			"navigationBarTitleText": "标题",
			"navigationBarTextStyle":"black"
		}
	}
	说明：
	1）pages字段	--用于描述当前小程序所有页面路径，这是为了让微信客户知道当前你的小程序页面定义在哪个目录
	2）window字段 --定义小程序所有页面的顶部背景颜色、文字颜色定义等。


2.工具配置(project.config.json):
	--自定义个性化的开发工具配置，如界面颜色、编译配置等

3.页面配置(*.json)
	--与页面名同名.json，该文件配置会覆盖app.json的window中相同的配置项
	详情：https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE

4.wxml模板(*.wxml)
	--充当类似html的角色
	详情：https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/

5.样式(*.wxss)
	--具有css大部分特性，小程序在wxss也做了一些扩充和修改。
	1）引用新的尺寸单位rpx
	2）全局样式(app.wxss)和局部样式(*.wxss)
	3）仅支持部分css选择器

6.js逻辑交互(*.js)
格式：
	详情：https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html
	Page({
		data: {},
		onLoad: function() {
			// 页面渲染后执行
		}
	})
实例：响应的数据绑定
	--1）在*.wxml文件
	<view>{{msg}}</view>
	<button bindtap="changeMsg">点击我</button>
	--2）在*.js文件
	Page({
		data: {
			msg: 'test message!'
		},
		changeMsg: function(e) {
			this.setData({msg: 'change message!'});
		}
	})


7.注册小程序(app.js):
	--每个小程序都需要在app.js方法中注册小程序示例，绑定生命周期回调函数、错误监听和页面不存在监听等
	--有且仅有一个App实例，是全部页面共享，可通过getApp()获取该实例。
格式：
	App({
		onLaunch (options) {
			// 小程序启动之后 触发
		},
		onShow (options) {
			// Do something when show.
		},
		onHide (options) {
			// Do something when hide.
		},
		onError (msg) {
			console.log(msg);
		},
		globalData: 'I am global data'
	});
	附：console.log(getApp().globalData); //输出I am global data



组件：
	详情：https://developers.weixin.qq.com/miniprogram/dev/component/
API：
详情：https://developers.weixin.qq.com/miniprogram/dev/api/
1）路由
	wx.redirectTo	#关闭当前页面，跳转到应用内的某个页面
	wx.navigateTo	#保留当前页面，跳转到应用内的某个页面
	wx.navigateBack	#关闭当前页面，返回上一页面或多级页面
2）界面


wx.getUserInfo	--获取微信用户的头像和昵称
wx.scanCode({ success: (res) => { console.log(res) } }); --调用微信扫一扫能力


if else格式：
<view wx:if="{{boolean==true}}">
    <view class="bg_black"></view>
</view>
<view wx:elif="{{boolean==false}}">
    <view class="bg_red"></view>
</view>
<view wx:elif>
    <view class="bg_red"></view>
</view>

for循环：
<block wx:for="{{userList}}" wx:for-item="item" wx:for-index="idx">
	<view>{{item.username}} :: {{idx}}</view>
</block>


if else格式：
<view wx:if="{{boolean==true}}">
    <view class="bg_black"></view>
</view>
<view wx:elif="{{boolean==false}}">
    <view class="bg_red"></view>
</view>
<view wx:elif>
    <view class="bg_red"></view>
</view>

for循环：
<block wx:for="{{userList}}" wx:for-item="item" wx:for-index="idx">
	<view>{{item.username}} :: {{idx}}</view>
</block>


http://192.168.0.199/wj/zz-weijianwei.git	--粤省事小程序git地址

微信官方文档：
	https://developers.weixin.qq.com/miniprogram/dev/devtools/page.html


小程序获取用户信息接口：
	--1）js获取用户信息：使用button组件，并指定open-type=getUserInfo
	<button open-type="getUserInfo" @getuserinfo="getUserInfo">微信登录</button>
	--2）页面展示用户信息：使用open-data展现用户基本信息
	<open-data type="userNickName" />
	<open-data type="userAvatarUrl" />


小程序登录：
	--前言：微信登录就是避免用户需要注册账号，和每次都要输入用户名和密码登录系统。
流程描述：
	时序图：https://images2015.cnblogs.com/blog/781431/201701/781431-20170123113138816-767177900.png
	--前提：使用button组件并指定open-type=getUserInfo，获取当前微信用户基本信息
	-1）获取微信登录临时凭证code(小程序里面)
		wx.login()
		code的有效期为5分钟，若5分钟内小程序的后台不拿这个临时凭证来微信后台服务器换取微信用户id，则该身份证就会被作废，需要再次调用wx.login重新生成登录凭证。
	-2）发送code(小程序->开发者服务器)
		在wx.login的success回调中拿到微信登录临时凭证code，紧接着会通过wx.request把code传给开发者服务器。
	-3）通过appId、appSecret和code获取openid和session_key(开发者服务器->微信服务器)
		--开发者服务器请求微信服务器，得到openid和session_key
		请求地址如下：https://api.weixin.qq.com/sns/jscode2session?appid=appid&secret=secret&js_code=js_code&grant_type=grant_type
		请求参数：
			appid & secret 	--即开发小程序的appId和appSecret
			js_code	--app传给开发者服务器的登录临时凭证code
			grant_type --特定值authorization_code
		返回openid和session_key描述：
			openid就是微信用户身份id，可以用这个id来区分不同的微信用户。
			secret_key则是微信服务器给开发者服务器的身份凭证，开发者可以用session_key请求微信服务器其它接口获取一些其它信息，因此session_key不应传给前端。
	-4）生成3rd_session，并存入redis缓存
		3rd_session用于开发者服务器h和小程序之间做登录态校验。
		存入redis缓存：3rd_session为key，session_key+openid为value
		描述：微信服务器返回的session_key是开发者服务器和微信服务器的会话密钥。同样，开发者服务器和开发者的小程序也应该有会话密钥，我们称为SessionId，将SessionId传给小程序，小程序携带SessionId请求开发者服务器，开发者服务器就可以通过SessionId查询当前用户身份，这样就不需要每次重新获取code。
	-5）3rd_session返回给小程序(开发者服务器->小程序)
		小程序将3rd_session写入storage。
		后续用户进入小程序，先从storage读取3rd_session
	-6）小程序发起业务请求(小程序->开发者服务器)
		wx.request()请求后端时携带3rd_session，后端根据3rd_session在redis存储中查找合法的openid和session_key。
	-7）检查3rd_session是否过期 & 检查session_key是否过期
		--3rd_session检查：通过前端返回来的3rd_session的过期时间判断
		--session_key检查：使用wx.checkSession()方法，session_key是为了调用微信其它api的凭证。若过期了则不能调用微信服务器的api接口，需要重新登录即可。

代码描述：
	--1）登录按钮
	<button open-type="getUserInfo" @getuserinfo="getUserInfo">微信登录</button>
	--2）处理逻辑
	methods: {
		async getUserInfo(e) {
			// 获取用户信息
			let userInfo = e.detail.userInfo;
			uni.login({
				provider: 'weixin',
				success(res) {
					// 1.获取登录的临时凭证
					console.log(res);
					
					// 2.调用后台，通过code获取微信的session_key和secret
					uni.request({
						url: 'http://192.168.1.101:8080/wxLogin',
						method: 'GET',
						data: {
							code: res.code
						},
						success: res => {
							// 将token保存在本地
							let token = res.data;
						},
						fail: () => {
							console.log("登录失败");
						}
					});
				}
			});
		}
	}
	--3）后台逻辑
	@RequestMapping("/wxLogin")
	public String wxLogin(String code) {
		System.out.println(code);
		
		// 请求微信服务器，得到openid和session_key
		RestTemplate restTemplate = new RestTemplate();
		String url = "https://api.weixin.qq.com/sns/jscode2session?appid={appid}&secret={secret}&js_code={js_code}&grant_type={grant_type}";
		Map<String, String> param = new HashMap<>();
		param.put("appid", "wxddf44695a847e2ff");
		param.put("secret", "56413cb32331a1e685456a55b62760e1");
		param.put("js_code", code);
		param.put("grant_type", "authorization_code");
		String responseData = restTemplate.getForObject(url, String.class, param);
		System.out.println(responseData);
		
		// 生成token，并存入redis缓存
		String token = UUID.randomUUID().toString();
		redisTemplate.opsForValue().set(WX_USER_PREFIX_KEY + token, responseData, 60*10, TimeUnit.SECONDS);
		return token; // 返回token和过期时间（未处理）
	}
	--5）检查token是否过期（用于小程序请求开发者服务器的api接口）
		略
	--4）检查session_key是否过期（用于小程序请求微信服务器的api接口）
		wx.checkSession({
			success: function(res) {
				console.log(res,'登录未过期');
			},
			fail: function() {
				console.log(res,'登录过期了');
				// TODO 重新调用wx.login()登录
			}
		})
	--附：redis配置类
	@Configuration
	public class RedisConfig {
		
		private static final StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();
		private static final GenericJackson2JsonRedisSerializer genericJackson2JsonRedisSerializer = new GenericJackson2JsonRedisSerializer();
		
		@Bean
		public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {
			
			RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();
			redisTemplate.setConnectionFactory(factory);
	//		redisTemplate.setDefaultSerializer(genericJackson2JsonRedisSerializer);
			
			redisTemplate.setKeySerializer(stringRedisSerializer);
			redisTemplate.setHashKeySerializer(stringRedisSerializer);
			redisTemplate.setValueSerializer(genericJackson2JsonRedisSerializer);
			
			return redisTemplate;
		}
	}			