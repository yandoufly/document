
区分公共校验和私有校验：
	--校验参数中，可将公共校验参数放到公共jsp文件中，私有的放在私有jsp文件中
	var validate = $.extend(true, {公共参数}, validateFun()); //validateFun()存在于私有jsp文件中
	$("form").validate(validate);

在页面中动态添加从表的输入框，且这些输入框校验必填！！
	1.新增tr中所有输入框的必填事件
	2.“新增”按钮点击事件，在点击事件中触发1中的必填事件
	3.初始化验证（用于维护页已存在的tr数据的修改）

体检表中存在一张从表（药物名称、每日次数、每次用量），在点击“新增”按钮后新增一条从表记录，这三个输入框校验如下：
	1.药物名称：当单选框“有无药物不良反应”为“有”时，必填；当单选框“有无药物不良反应”为“无”时，非必填。
	2.每日次数、每次药量：若“药物名称”有值，则必填，不填写不允许保存

某张表的已完整校验：
	在表中添加一个字段判断该记录是否已完整，避免以后再次需要判断该记录是否完整的情况。


注：RegExp里面的特殊参数需要转义！！
// 证件号码必须符合1位H或M的字母+8位数字或10位数字
var reg = new RegExp("^[HM]{1}(\\d{8}|\\d{10})$");
reg.test('H12345678') //true
reg.test('H123456789') //false
reg.test('H1234567890') //true
reg.test('M1234567890') //true

// 证件号码必须符合1位字母+9位数字
var reg = new RegExp("^[a-zA-Z]{1}\\d{9}$");
reg.test('A123456789') // true

// 居民身份证号填写不符合规范，必须为18位数字或17为数字+X
var reg = new RegExp("^\\d{17}[\\dxX]{1}$");
reg.test('12345678901234567X') // true



js校验函数：

// 正则表达式校验 测试是否为数字：checkReg('2s', '^[0-9]*$')
checkReg(str, regStr) {
	var reg = new RegExp(regStr);
	return reg.test(str);
}

// 长度校验
checkStringLength(str, len) {
	return !!(str && str.length == len);
}

// 手机号码校验
function checkPhone(checkVal) {
	var reg = /^((13[0-9])|(14[1|4|5|6|7|8|9])|(15([0|1|2|3|5|6|7|8|9]))|(16[2|5|6|7])|(17[0|1|2|3|5|6|7|8])|(18[0-9])|(19[1|8|9]))\d{8}$/;
	return reg.test(checkVal);
}

// 证件号码校验
function checkIDCard(checkVal){
	// 加权因子
	var weight_factor = [7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2];
	// 校验码
	var check_code = ['1', '0', 'X' , '9', '8', '7', '6', '5', '4', '3', '2'];

	var code = checkVal + "";
	var last = checkVal[17];//最后一位

	var seventeen = code.substring(0,17);

	// ISO 7064:1983.MOD 11-2
	// 判断最后一位校验码是否正确
	var arr = seventeen.split("");
	var len = arr.length;
	var num = 0;
	for(var i = 0; i < len; i++){
		num = num + arr[i] * weight_factor[i];
	}
	 
	// 获取余数
	var resisue = num%11;
	var last_no = check_code[resisue];

	/*
		正则思路：
		第一位不可能是0
		第二位到第六位可以是0-9
		第七位到第十位是年份，所以七八位为19或者20
		十一位和十二位是月份，这两位是01-12之间的数值
		十三位和十四位是日期，是从01-31之间的数值
		十五，十六，十七都是数字0-9
		十八位可能是数字0-9，也可能是X
	*/
	var idcard_patter = /^[1-9][0-9]{5}([1][9][0-9]{2}|[2][0][0|1][0-9])([0][1-9]|[1][0|1|2])([0][1-9]|[1|2][0-9]|[3][0|1])[0-9]{3}([0-9]|[X]|[x])$/;

	// 判断格式是否正确
	var format = idcard_patter.test(checkVal);

	// 返回验证结果，校验码和格式同时正确才算是合法的身份证号码
	return last.toLowerCase()== last_no.toLowerCase() && format ? true : false;
}
