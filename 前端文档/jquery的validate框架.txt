
相关教程：
	http://www.runoob.com/jquery/jquery-plugin-validate.html

引入：
	<script src="http://static.runoob.com/assets/jquery-validation-1.14.0/lib/jquery.js"></script>
	<script src="http://static.runoob.com/assets/jquery-validation-1.14.0/dist/jquery.validate.min.js"></script>


简单实例：
-1）js部分
$(function() {
	$("#inputForm").validate({
		rules: {
			username: "required",
			passwd: {
		        required: true,
		        minlength: 5
	      	},
	      	confirm_passwd: {
	      		required: true,
	      		equalTo: "#password"
	      	},
	      	"role.name": { //处理name="role.name"的输入框
				required: true
			}
		},
		message: {
			username: "请输入用户名",
			password: {
				minlength: "密码长度不能小于 5 个字母"
			},
			confirm_password: {
				minlength: "密码长度不能小于 5 个字母",
				equalTo: "两次密码输入不一致"
			}
		}
	});
})
-2）ajax提交
$("#updateBtn").click(function() {
	if ($("#inputForm").valid()) { //先校验通过才能提交(关键)
		$.ajax({
			url: $("#inputForm").prop("action"),
			data:$("#inputForm").serialize(),
			type: "post",
			success: function(data) {
				alert(data);
			}
		});
	}
});
-3）submit提交
	<input class="submit" type="submit" value="提交">
	直接点击提交按钮即可。



校验规则：
	required:true		--必填
	remote:"check.php"	--使用 ajax 方法调用 check.php 校验输入值
	dateISO:true		--必须输入正确格式的日期（ISO），例如：2009-06-23，1998/01/22。只校验格式，不校验有效性。
	max:5				--输入值不能大于5
	min:10				--输入值不能小于 10
	range:[0, 42]		--只能输入0~42范围

注意：
	required: true 			--值是必填的
	required: function(){ return true; } 	--返回为真，表示需要校验


中文API：
1.valid()
	--校验是否通过
	例如：$("#inputForm").valid()
2.rules("add",rules)
	--input增加校验
	例如：$('[name="username"]').rules("add", {remote: "${ctx}/user/checkUsername"})
2.rules("remove",rules)
	--input移除校验
	例如：$('[name="username"]').rules("remove")
		$('[name="biologicalSample.sampleSize"]').rules("remove", "max");
3.element(element)
 	--获取某个元素的校验结果
 	例如：var usernameValidate = $("#inputForm").validate().element($("#username"));
4.resetForm()
	--把前面校验的form表单恢复到校验前原来的状态
5.setDefaults(defaults)
	--改变默认的设置
6.addMethod(name,method,message)
	--添加一个新的校验方法
	例如：新增日期校验不可晚于某日期
	$.validator.addMethod("geDate", function(value, element, param) {// greater then or Equal
		return this.optional(element) || new Date(value) >= new Date(param);
	}, "不能早于当前日期!");

实例：
	<input type="text" name="biologicalSample.sampleSize" value="${sample.sampleSize}">
--用户取消了“样本量最大值”校验时
	$('[name="biologicalSample.sampleSize"]').rules("remove", "max");
--用户进行某项操作后，需加上这个校验时
	$('[name="biologicalSample.sampleSize"]').rules("remove", { max: 100 });

实例：
--某个字段增加校验规则
	--也可以使用rules("add", rules);
	var rules = $("form").validate().settings.rules;
	rules.managementOrganization = {
		countyAtLeast: true
	};	
--删除某个字段的校验规则
	--也可以使用rules("remove" [, validName]);
	var rules = $("form").validate().settings.rules;
	delete rules.managementOrganization;



1.修改默认设置:
$.validator.setDefaults({
	submitHandler: function(form) { 
		alert("提交事件!");
		//form.submit(); //方式一：submit提交
		//$(form).ajaxSubmit(); //方式二：ajax提交
	}
});


2.更改错误信息显示方式：
	$.validator.setDefaults({
		errorPlacement: function(error, element) {
			$(element).after(error); //在输入框后面添加提示语
		},
		errorElement: "div", //自定义错误提示的标记
		errorClass: "error" //自定义错误提示的样式
	});
--更改错误信息样式(.css文件)
	div.error {
		background-color: royalblue;
	}

3.重置表单(resetForm)
	var validator = $("#inputForm").validate({...//省略})
	$("#resetBtn").click(function(){
		validator.resetForm();
	})

4.异步校验(remote)
	remote: "${ctx}/user/check-username" //格式一
	remote: function() { //格式二(传入参数场景)
		return "${ctx}/user/check-username?username"+$("#username").val()
	}


5.自定义校验
	格式：addMethod(name, method, message)
实例1：
--只能输入一个范围在a~f的字母
--1）js方法
$.validator.addMethod("af", function(value, element, params){
	if(value.length > 1) {
		return false;
	}
	if(value < params[0] || value > params[1]) {
		return false;
	}
	return true;
},"必须是一个字母，且范围在a~f之间")
--2）表单
	--有个表单字段的 name="username"，则在rules中写
	username: {
		required: true,
		af: ["a", "f"]
	}

实例2：
--1）编写正则表达式校验
	$.validator.addMethod("regexMatch", function(value, element, param) {
		return this.optional(element) || regexMatch(value, param);
	}, "格式不正确!");

	function regexMatch(str, patternStr) {
		eval("var pattern = " + patternStr);
		return pattern.test(str);
	}
--2）测试1
	$(this).rules("add", {
		required: true,
		regexMatch: "/^[0-9,]+$/",
		messages: {
			regexMatch: "请输入合法数值"
		}
	});
--3）测试2
	"group.intoNumber": {
		regexMatch: "/^" + getCurrentDate().getFullYear() + "\\d{4}$/",
		messages: {
			regexMatch: "格式：当前年份（4位）+ 数字（4位）；如：20180001"
		}
	}
	

获取某个元素的校验结果：
	--例如var usernameValid = $("#inputForm").validate().element($("#usernameId"));
function changeSampleSizeVal() {
	var sampleSizeNow = $("[name='biologicalSample.sampleSize']").val();

	// 获取sampleSize输入框的校验结果
	var sampleSizeValid = $("#inputForm").validate().element($("[name='biologicalSample.sampleSize']"));
	if (!sampleSizeValid || gtAmount == null) {
		$("#sampleSizeWarnDiv").attr("style", "display:none");
		return false;
	}
	// 用来检查数值过大时，提示
	if (sampleSizeNow > gtAmount) {
		$("#sampleSizeWarnDiv").text("该数值较大，请确认是否填写正确");
		$("#sampleSizeWarnDiv").attr("style", "display:block");
	} else {
		$("#sampleSizeWarnDiv").attr("style", "display:none");
	}	
}



扩展校验：
--先写公共参数的校验，再引入每个页面私有的参数校验
--1.在公共jsp文件中
// 公共的参数校验
var validate = $.extend(true, {
	rules: {
		managementOrganization: {
			countyAtLeast: true
		}
	},
	message: {},
	submitHandler: function(form) {
		if (setSelectedObject()) {
			openNewWindow($("form").attr("action") + "?" + $("form").serialize() + "&pageSize=20");
		} else {
			alert("请选择自定义显示列");
		}
		return false;
	}
}, validateFun());
// 其它条件的校验，用于防止私有jsp文件未引入该函数
function validateFun() {
	return {

	};
}

$("form").validate(validate);

--2.存在私有的jsp文件中
function validateFunc() {
	return {
		rules: {
			year: {
				required: true,
				digits: true
			}
		},
		messages: {}
	};
}


jquery validation对隐藏的元素不进行校验
	--相关链接：https://blog.csdn.net/pdy8023/article/details/81128619
源码：
	--可以看到只校验“input、select、textarea”
	--不校验“:submit, :reset, :image, [disabled]”，和ignore
	--插件ignore默认值为{ignore: ":hidden"}
elements: function() {
    var validator = this,
    rulesCache = {};

    // Select all valid inputs inside the form (no submit or reset buttons)
    return $( this.currentForm )
    .find( "input, select, textarea, [contenteditable]" )
    .not( ":submit, :reset, :image, [disabled]" )
    .not( this.settings.ignore )
    .filter( function() {
        var name = this.name || $( this ).attr( "name" ); // For contenteditable
        if ( !name && validator.settings.debug && window.console ) {
            console.error( "%o has no name assigned", this );
        }
        // Set form expando on contenteditable
        if ( this.hasAttribute( "contenteditable" ) ) {
            this.form = $( this ).closest( "form" )[ 0 ];
        }
        // Select only the first element for each name, and only those with rules specified
        if ( name in rulesCache || !validator.objectLength( $( this ).rules() ) ) {
            return false;
        }
        rulesCache[ name ] = true;
        return true;
    } );
},

自定义某些不需校验的元素：
	$.extend($.validator.defaults,{ignore:"自定义样式"});
实例：
	$.extend($.validator.defaults,{ignore:"[nonValidate], [readonly]"});
	<input type="text" name="aa1" nonValidate> //不校验
	<input type="text" name="aa8" readonly> //不校验



//药物名称：当单选框“有无药物不良反应”为“有”时，必填；当单选框“有无药物不良反应”为“无”时，非必填。
//每日次数、每次药量：若“药物名称”有值，则必填，不填写不允许保存
$("[name=adverseDrugReaction]").change(function() {
	var medicineNameInput = $("#medicineSituationTable").find("input[name^=medicineSituations][name$=medicineName]");
	var medicineUsageNoteInput = $("#medicineSituationTable").find("input[name^=medicineSituations][name$=medicineUsageNote]");
	var medicineDosageInput = $("#medicineSituationTable").find("input[name^=medicineSituations][name$=medicineDosage]");
	if ($(this).val() == "1") {
		medicineNameInput.each(function(index) {
			$(this).rules("add", {
				required: true
			});
			medicineUsageNoteInput.eq(index).rules("add", {
				required: function() {
					return (medicineNameInput.eq(index).val() ? true : false);
				}
			});
			medicineDosageInput.eq(index).rules("add", {
				required: function() {
					return (medicineNameInput.eq(index).val() ? true : false);
				}
			});
		});
	} else {
		medicineNameInput.each(function(index) {
			$(this).rules("remove");
			medicineUsageNoteInput.eq(index).rules("remove");
			medicineDosageInput.eq(index).rules("remove");
		});
	}
});


--糖尿病随访记录：存在“胰岛素”的多记录，每点击“新增”按钮在相应的table中新增一行tr，并校验该tr中input必填校验
	//1.胰岛素校验--绑定事件
	$("#insulinMedicationRulesTable").bind("addValidateRules", function(event, newTr) {
		$(newTr).find("[name^=insulinMedications][name$=insulinKind]").rules("add", {
			required: true
		});
		$(newTr).find("[name^=insulinMedications][name$=usageAndDosage]").rules("add", {
			required: true
		});
	});
	--在点击“新增”按钮时，需要触发该事件，用于校验必填项

	//2.“新增”按钮
	$("[data-table='newTr']").bind("click", function(event) {
		var $panelBody = $panelHeader.next("panelBody");
		var $table = $panelBody.find("table[data-table='targetTable']");
		var $templateTr = $panelBody.find("table[data-table='template']").find("tr");
		var $newTr = $templateTr.clone(true, true);
		...
		$table.trigger("addValidateRules", [$newTr]);
	})

	//3.初始化校验（用于维护页已存在的tr数据的修改）
	function initValidate() {
		$("[id$=RulesTable]").each(function() {
			var $table = $(this);
			var $trs = $table.find("tr:gt(0)");
			$trs.each(function() {
				var $tr = $(this);
				$table.trigger("addValidateRules", [$tr]);
			});
		});
	}


实例：日期校验
	$.validator.addMethod("datex", function(value, element, param) {
		return this.optional(element) || (new Date(value).getDate()==date.substring(value.length-2));
	}, "日期不合法");

	$.validator.addMethod("geDate", function(value, element, param) {// greater then or Equal
		return this.optional(element)
			|| param == ""
			|| new Date(value) >= new Date(param);
	}, "不能早于当前日期!");

	$.validator.addMethod("leDate", function(value, element, param) {// less then or Equal
		return this.optional(element)
			|| param == ""
			|| new Date(value) <= new Date(param);
	}, "不能晚于当前日期!");


异步校验、返回错误提示语：
	$.validator.addMethod("ajaxValidate", function(value, element, param) {
		return ajaxValidate(param);
	}, "验证不通过");

	function ajaxValidate(params) {
	var async = false;
		if (params.async) {
			async = params.async;
		}
		var flag = true;
		$.ajax({
			url: params.url,
			async: async,
			type: "post",
			data: params.data,
			dataType: "json",
			success: function(data) {
				if (data.message.length > 0) {
					flag = false;
					$.validator.messages.ajaxValidate = data.message;
				}
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				flag = false;
				$.validator.messages.ajaxValidate = "查询失败！错误信息：" + textStatus;
			}
		});
		return flag;
	}

	测试：
	--1.页面
	identityNumber: {
		required: true,
		ajaxValidate: {
			url: "${ctx}/fdoc/staff/isCheckIdentityNumberRemote",
			data: {
				identityNumber: function() {
					return $(identityNumber).val();
				},
				oragnization: function() {
					return $("[name='managementOrganization']").val();
				}
			}
		}
	}
	--2.后台
	@RequestMapping(value = "/isCheckIdentityNumberRemote")
	@ResponseBody
	public Map<String, Object> isCheckIdentityNumberRemote(String identityNumber, String oragnization) {
		Map<String, Object> map = Maps.newHashMap();
		String message = staffService.isCheckIdentityNumberRemote(identityNumber, oragnization);
		map.put("message", message);
		return map;
	}

